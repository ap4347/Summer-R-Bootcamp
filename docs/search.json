[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"  Welcome Summer R Bootcamp. website contains comprehensive notes tutorials topics covered bootcamp. Objectives: Summer R Bootcamp designed equip current/incoming students solid foundation R, one powerful versatile programming languages data science community.aims help current/incoming students gain understanding core concepts R programming, give experience statistical procedures, improve coding skills order successfully complete MA program curriculum.course four weeks, dive essentials R, basic programming concepts advanced data analysis techniques. exposed various topics R programming lecture notes, examples, exercises. successfully complete summer bootcamp able toManipulate wrangle data different structures.Develop skills clean, manipulate, analyze data.Explore data via visualization basic modeling exploratory data analysis (EDA).Tackle familiar statistical concepts.Communicate results. Timeline: July 7 – August 3 (4 weeks) topics covered Summer R Bootcamp:Week 1: Base RData TypesData StructuresConditional Statements (Control Structures) & LoopsFunctionsWeek 2: Functional Programming Tidyverse packagesFunctional ProgrammingDplyr PackageTidyr PackageWeek 3: Data Visualization, Communication, Reporting ToolsData Visualization (Base R ggplot2 package)Rmarkdown FilesWeek 4: Basic Applied Statistics ProbabilityGenerating Probability Distributions Random SamplesStatistical InferenceLinear Regression Models Assignments: requirement complete/submit homework assignments. Every week chance complete self-assessment assignments (Problem Sets), \ngraded (Solutions assignments provided).addition, supported teaching assistants (TAs), address questions walk tutorials assignments (needed) help room hours.","code":""},{"path":"introduction.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":" R programming language software environment statistical analysis, graphics representation, reporting. R created Ross Ihaka Robert Gentleman University Auckland, New Zealand, currently developed R Development Core Team. free charge open-source.Nowadays, many companies, universities, individuals backgrounds shifting towards using R, ():free open-source, available every major platform.Results produced R reproducible.R diverse supportive community, online offline.numerous set packages various tasks statistical analysis, data science, data visualization, reporting results etc.Powerful tools communicating results.RStudio IDE (Integrated Development Environment).Deep-seated language support data analysis.strong foundation functional programming.","code":""},{"path":"introduction.html","id":"getting-started-downloading-and-installing-r-rstudio","chapter":"Introduction","heading":"Getting Started: Downloading and Installing R & RStudio","text":"","code":""},{"path":"introduction.html","id":"installing-r","chapter":"Introduction","heading":"Installing R","text":"first thing need install R computer. works pretty much every platform available, including widely used Windows, Mac OS, Linux systems. can download R . Pick operating system follow instructions stated page. download R, install machine.","code":""},{"path":"introduction.html","id":"installing-rstudio","chapter":"Introduction","heading":"Installing RStudio","text":"R old-fashion, old-school interface, less intuitive makes coding harder (especially beginners). Thus, using RStudio instead. RStudio IDE (Integrated Development Environment), user-friendly interface equipment many useful features. facilitates extensive code editing, development well various features make R easy language implement. using RStudio call R. can dowload RStudio .Note, order work RStudio, first need download install R.","code":""},{"path":"introduction.html","id":"rstudio-interface","chapter":"Introduction","heading":"RStudio Interface","text":"may initially overwhelmed different panes tabs available RStudio. , things, take little bit get used eventually learn love layout.RStudio 4 main panes:","code":""},{"path":"introduction.html","id":"code-editor-source-pane","chapter":"Introduction","heading":"Code Editor (Source Pane)","text":"likely pane spend majority time top left corner. ’s called Code Editor (.k.Source Pane). place create edit R Scripts (files \".R\" extension contain code). open RStudio, automatically start new Untitled script. start typing untitled R script, always save file new file name (example, \"script_1.R\"). way, something computer crashes ’re working, R code saved re-open RStudio.notice, typing code R scripts execute . run entire code, can click Run button top pane. , want execute specific line code, put cursor line press Command + Return Mac Control + Enter PC.","code":""},{"path":"introduction.html","id":"console-pane","chapter":"Introduction","heading":"Console Pane","text":"bottom left pane called Console. using Console way check work thoughts. Basically, Console place R code run executing R scripts. place output/results displayed.","code":""},{"path":"introduction.html","id":"environmenthistory-pane","chapter":"Introduction","heading":"Environment/History Pane","text":"Environment (.k.Global Environment, .k.Working Environment) tab shows names data objects ’ve defined current R session. can also see information objects contain.History tab simply shows history code ’ve previously evaluated Console.","code":""},{"path":"introduction.html","id":"output-pane","chapter":"Introduction","heading":"Output Pane","text":"bottom right pane RStudio contains tabs default useful place view variety miscellaneous information RStudio projects files.Files: leftmost tab shows file folder structure. shows files stored, called, folders may exist project folder.Plots/Viewer: shows resulting graphs/figures R code generated.Packages: shows packages downloaded computer. can also see packages loaded current working environment looking see check-mark exists next package name.Help: shows documentations R functions, datasets, packages available R.","code":""},{"path":"introduction.html","id":"r-as-a-calculator-operators","chapter":"Introduction","heading":"R as a Calculator: Operators","text":"operator symbol tells R perform specific mathematical logical manipulations. R language rich built-operators provides following types operators:Arithmetic OperatorsRelational OperatorsLogical OperatorsAssignment OperatorsIn module consider arithmetic assignment operators. Later , discuss relational logical ones.","code":""},{"path":"introduction.html","id":"arithmetic-operators","chapter":"Introduction","heading":"Arithmetic Operators","text":"R supports various arithmetic operations. words, can use R simple calculator. instance,following table shows basic arithmetic operators supported R language:","code":"\nprint(2 + 3)\n#> [1] 5\nprint(4*5 - 2/3)\n#> [1] 19.33333"},{"path":"introduction.html","id":"assignment-operators","chapter":"Introduction","heading":"Assignment Operators","text":"order create variable R, can use <- assignment symbol. example, let’s create variable x give value 4:Let’s create another variable y, equal 10:create variables, stored global environment available use operations. Now R knows x = 4 y = 10.Note, R case sensitive. mean? means R x X different objects. , now call X variable, R throw error tell object exist global environment:","code":"\nx <- 4\nprint(x)\n#> [1] 4\ny <- 10\nprint(y)\n#> [1] 10\nprint(x + y)\n#> [1] 14\nprint(X)\n#> Error: object 'X' not found"},{"path":"introduction.html","id":"working-with-a-global-environment","chapter":"Introduction","heading":"Working with a Global Environment","text":"","code":""},{"path":"introduction.html","id":"saving-the-global-environment","chapter":"Introduction","heading":"Saving the Global Environment","text":"’ve run long code produced valuable results, might want save output stored global environment now. , can execute following line code, saves global environment working directory (place computer R saves files):","code":"\nsave.image()"},{"path":"introduction.html","id":"removing-objects-from-the-global-environment","chapter":"Introduction","heading":"Removing Objects from the Global Environment","text":"remove specific object (suppose variable x) Global Environment, use rm() function:remove objects stored Global Environment, use rm(list = ls()) function:","code":"\nrm(x)\nrm(list = ls())"},{"path":"introduction.html","id":"listing-objects-stored-in-the-global-environment","chapter":"Introduction","heading":"Listing Objects Stored in the Global Environment","text":"list objects stored Global Environment, use ls() function:","code":"\nls()"},{"path":"introduction.html","id":"working-directory","chapter":"Introduction","heading":"Working Directory","text":"mentioned, R stores files working directory. check working directory machine , use getwd() function:","code":"\ngetwd()\n#> [1] \"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp\""},{"path":"introduction.html","id":"getting-help","chapter":"Introduction","heading":"Getting Help","text":"Sometimes don’t exactly know certain functions work. can use ? console followed function name figure inputs (arguments) function can utilized. example, let’s check mean() function works:Now output pane (bottom right pane) Help tab see information mean() function.","code":"\n?mean"},{"path":"module-1.html","id":"module-1","chapter":"Module 1","heading":"Module 1","text":" ","code":""},{"path":"module-1.html","id":"data-types-and-data-stuctures-part-i","chapter":"Module 1","heading":"Data Types and Data Stuctures (Part I)","text":"","code":""},{"path":"module-1.html","id":"data-types","chapter":"Module 1","heading":"Data Types","text":"programming, data types important concept. Variables can store data different types, different types can different things. correct processing, programming language must know can done particular value. example, addition performed words Hello world. Similarly, change numbers 5 -22 lower uppercase.Due , R feature called data types. Different kind values assign different data types help differentiate . types certain characteristics rules associated define properties.course consider following data types:NumericIntegersComplexLogicalCharactersThere data types available R, beyond scope class. Let’s get data types one--one.","code":""},{"path":"module-1.html","id":"numeric-data-type","chapter":"Module 1","heading":"Numeric Data Type","text":"may expect, numeric data type numerical values. create variable numeric data type, simply assign numeric value variable.Use class() function find type variable .","code":"\n\nx_num <- 1\n\nprint(x_num)\n#> [1] 1\n\ny_num <- -2.35\n\nprint(y_num)\n#> [1] -2.35\n\nclass(x_num)\n#> [1] \"numeric\"\n\nclass(y_num)\n#> [1] \"numeric\""},{"path":"module-1.html","id":"integers-data-type","chapter":"Module 1","heading":"Integers Data Type","text":"integers data type special case numeric data type used integer values. store value integer, need specify using .integer() function:input value integer (example, 2.85), .integer() function remove decimal points keep integers .Another way creating variable integer data type use integer followed L letter:","code":"\n\nx_int <- as.integer(2)\n\nprint(x_int)\n#> [1] 2\n\nclass(x_int)\n#> [1] \"integer\"\n\ny_int <- as.integer(2.85)\n\nprint(y_int)\n#> [1] 2\n\nclass(x_int)\n#> [1] \"integer\"\n\nz_int <- 4L\n\nprint(z_int)\n#> [1] 4\n\nclass(z_int)\n#> [1] \"integer\""},{"path":"module-1.html","id":"complex-data-type","chapter":"Module 1","heading":"Complex Data Type","text":"Complex data types used store numbers imaginary component. instance, 1 + 3i, 2 - 5i, 3 - 4i. class going use data type, good know .","code":"\n\nx_comp <- 20 + 6i\n\nprint(x_comp)\n#> [1] 20+6i\n\nclass(x_comp)\n#> [1] \"complex\""},{"path":"module-1.html","id":"logical-data-type","chapter":"Module 1","heading":"Logical Data Type","text":"logical data type stores logical (also known boolean) values TRUE FALSE:","code":"\n\nx_logical <- TRUE\n\nprint(x_logical)\n#> [1] TRUE\n\nclass(x_logical)\n#> [1] \"logical\"\n\ny_logical <- FALSE\n\nclass(y_logical)\n#> [1] \"logical\"\n\nz_logical <- T\n\nclass(z_logical)\n#> [1] \"logical\""},{"path":"module-1.html","id":"character-data-type","chapter":"Module 1","heading":"Character Data Type","text":"character data type stores character values strings. Strings R can contain alphabet, numbers, symbols. easiest way denote value character type R wrap value inside single double quotes:","code":"\n\nx_char <- \"2102\"\n\nprint(x_char)\n#> [1] \"2102\"\n\nclass(x_char)\n#> [1] \"character\"\n\ny_char <- \"Welcome to STAT 2102!\"\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nclass(y_char)\n#> [1] \"character\""},{"path":"module-1.html","id":"converting-data-types","chapter":"Module 1","heading":"Converting Data Types","text":"R can convert values one data type another. R certain rules govern conversions.","code":""},{"path":"module-1.html","id":"converting-into-numeric-data-type","chapter":"Module 1","heading":"Converting into Numeric Data Type","text":"discuss convert data type numeric, let’s first introduce .numeric() function checks whether variable numeric data type:convert data type numeric, can use .numeric() function. converting integer type data numeric, .numeric() changes type keeps value ; converting complex data type, removes imaginary part number; converting logical data type, TRUE value converted 1, FALSE converted 0; finally, character values can similarly converted numerical values string contains letters symbols, numeric value becomes NA:","code":"\n\nis.numeric(x_num)\n#> [1] TRUE\n\nis.numeric(x_char)\n#> [1] FALSE\n\n######################################\nx_comp\n#> [1] 20+6i\n\nis.numeric(x_comp)\n#> [1] FALSE\n\nnum1 <- as.numeric(x_comp)\n#> Warning: imaginary parts discarded in coercion\n\nclass(num1)\n#> [1] \"numeric\"\n\nprint(num1)\n#> [1] 20\n\n######################################\n\nx_logical\n#> [1] TRUE\n\nlogical1 <- as.numeric(x_logical)\n\nclass(logical1)\n#> [1] \"numeric\"\n\nprint(logical1)\n#> [1] 1\n\n######################################\n\ny_logical\n#> [1] FALSE\n\nlogical2 <- as.numeric(y_logical)\n\nclass(logical2)\n#> [1] \"numeric\"\n\nprint(logical2)\n#> [1] 0\n\n######################################\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nchar1 <- as.numeric(y_char)\n#> Warning: NAs introduced by coercion\n\nclass(char1)\n#> [1] \"numeric\"\n\nprint(char1)\n#> [1] NA\n\n######################################\n\nprint(x_char)\n#> [1] \"2102\"\n\nchar2 <- as.numeric(x_char)\n\nclass(char2)\n#> [1] \"numeric\"\n\nprint(char2)\n#> [1] 2102"},{"path":"module-1.html","id":"converting-into-integer-data-type","chapter":"Module 1","heading":"Converting into Integer Data Type","text":"convert data type integer, can use .integer() function. properties function similar stated , skip . (Try !)","code":""},{"path":"module-1.html","id":"converting-into-logical-data-type","chapter":"Module 1","heading":"Converting into Logical Data Type","text":"convert data type logical, can utilize .logical() function. return FALSE value zero TRUE anything else. Character values converted .logical() function, always return NA:","code":"\n\n######################################\nprint(y_num)\n#> [1] -2.35\n\nis.logical(y_num)\n#> [1] FALSE\n\nlogi1 <- as.logical(y_num)\n\nclass(logi1)\n#> [1] \"logical\"\n\nprint(logi1)\n#> [1] TRUE\n\n\n\n######################################\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nlogi2 <- as.logical(y_char)\n\nclass(logi2)\n#> [1] \"logical\"\n\nprint(logi2)\n#> [1] NA\n\n######################################\n\nprint(x_char)\n#> [1] \"2102\"\n\nlogi3 <- as.logical(x_char)\n\nclass(logi3)\n#> [1] \"logical\"\n\nprint(logi3)\n#> [1] NA"},{"path":"module-1.html","id":"converting-into-character-data-type","chapter":"Module 1","heading":"Converting into Character Data Type","text":"can convert data type character data type using .character() function. converts original value character string.","code":"\n\n######################################\nprint(y_num)\n#> [1] -2.35\n\nis.character(y_num)\n#> [1] FALSE\n\nchar1 <- as.character(y_num)\n\nclass(char1)\n#> [1] \"character\"\n\nprint(char1)\n#> [1] \"-2.35\"\n\n######################################\n\nprint(x_comp)\n#> [1] 20+6i\n\nchar2 <- as.character(x_comp)\n\nclass(char2)\n#> [1] \"character\"\n\nprint(char2)\n#> [1] \"20+6i\""},{"path":"module-1.html","id":"data-structures","chapter":"Module 1","heading":"Data Structures","text":"programming language, need use different variables store different data. Unlike programming languages like C Java, R doesn’t variables declared data type. , variables appointed R-objects knowledge form R-object becomes datatype variable. many types R-objects (data structures). commonly used ones :VectorsListsMatricesData FramesFactorsIn module, discuss vectors lists. Later, go data structures well.","code":""},{"path":"module-1.html","id":"vectors","chapter":"Module 1","heading":"Vectors","text":"","code":""},{"path":"module-1.html","id":"creating-vectors","chapter":"Module 1","heading":"Creating Vectors","text":"Vector basic data structure R programming language. various ways creating vector. common way using c() function:can also use : operator create vector:Another way use seq() function:can consider one function, rep(), create vector:","code":"\n\nvec1 <- c(1, 2, 3, 4, 5)\n\nprint(vec1)\n#> [1] 1 2 3 4 5\n\nvec2 <- c(\"fall\", \"winter\", \"spring\", \"summer\")\n\nprint(vec2)\n#> [1] \"fall\"   \"winter\" \"spring\" \"summer\"\n\nvec3 <- 3:11\n\nprint(vec3)\n#> [1]  3  4  5  6  7  8  9 10 11\n\nvec4 <- seq(from = 1, to = 5, by = 0.7)\n\nprint(vec4)\n#> [1] 1.0 1.7 2.4 3.1 3.8 4.5\n\n\nvec5 <- seq(from = 1, to = 5, length.out = 8)\n\nprint(vec5)\n#> [1] 1.000000 1.571429 2.142857 2.714286 3.285714 3.857143\n#> [7] 4.428571 5.000000\n\nvec6 <- rep(5, times = 3)\n\nprint(vec6)\n#> [1] 5 5 5\n\nvec7 <- rep(c(1,3,4), times = 2)\n\nprint(vec7)\n#> [1] 1 3 4 1 3 4\n\nvec8 <- rep(c(\"apple\", \"orange\", \"mango\"), times = 2, each = 3)\n\nprint(vec8)\n#>  [1] \"apple\"  \"apple\"  \"apple\"  \"orange\" \"orange\" \"orange\"\n#>  [7] \"mango\"  \"mango\"  \"mango\"  \"apple\"  \"apple\"  \"apple\" \n#> [13] \"orange\" \"orange\" \"orange\" \"mango\"  \"mango\"  \"mango\""},{"path":"module-1.html","id":"how-many-elements-does-your-vector-contain","chapter":"Module 1","heading":"How Many Elements Does Your Vector Contain?","text":"can use length() function check many elements stored vectors:","code":"\n\nprint(vec7)\n#> [1] 1 3 4 1 3 4\n\nlength(vec7)\n#> [1] 6"},{"path":"module-1.html","id":"adding-elements-to-vectors","chapter":"Module 1","heading":"Adding Elements to Vectors","text":"order add new elements existing vector, can utilize c() function :like insert element(s) specific position(s) vector, use append() function:","code":"\n\n# Adding three elements, c(15, 3, 4), to vec1\n\nvec9 <- c(vec1, c(15, 3, 4))\n\nprint(vec9)\n#> [1]  1  2  3  4  5 15  3  4\n\n# Merging vec1 and vec3\n\nvec10 <- c(vec1, vec3)\n\nprint(vec10)\n#>  [1]  1  2  3  4  5  3  4  5  6  7  8  9 10 11\n\n# Insert 55 to vec1 at the 2nd position\n\nvec11 <- append(vec1, 55, after = 1) \n\nprint(vec11)\n#> [1]  1 55  2  3  4  5"},{"path":"module-1.html","id":"subsettingindexing-vectors","chapter":"Module 1","heading":"Subsetting/Indexing Vectors","text":"use square brackets, [], extract specific elements vectors:","code":"\n\n# selects the first element of the vec1\n\nvec1[1]  \n#> [1] 1\n\n# selects the 1st, 5th, and 8th elements of the vec9\n\nvec9[c(1,5,8)]  \n#> [1] 1 5 4\n\n# selects the 4th, 5th, 6th, and 7th elements of the vec9\n\nvec9[4:7] \n#> [1]  4  5 15  3\n\n# selects the first and second elements of vec1\n\nvec1[c(T, T, F, F, F,F)]  \n#> [1] 1 2\n\n# select all elements of vec1 that are greater than 2.5\n\nvec1[vec1 > 2.5] \n#> [1] 3 4 5\n\n# select all elements of vec1 that are not equal to 3\n\nvec1[vec1 != 3] \n#> [1] 1 2 4 5\n\n# selects all elements of vec1 except the 4th one\n\nvec2[-4]  \n#> [1] \"fall\"   \"winter\" \"spring\"\n\n# selects all elements of vec1 except the 1st and 2nd ones\n\nvec2[c(-1, -2)]                \n#> [1] \"spring\" \"summer\""},{"path":"module-1.html","id":"assigning-new-values-to-elements-of-the-existing-vector","chapter":"Module 1","heading":"Assigning New Values to Elements of the Existing Vector","text":"Use assignment operator, <-, assign new values elements existing vector:","code":"\n\n# Assigning a new value to the first element of vec1\n\nprint(vec1)\n#> [1] 1 2 3 4 5\n\nvec1[1] <- 100\n\nprint(vec1)\n#> [1] 100   2   3   4   5"},{"path":"module-1.html","id":"vectorization","chapter":"Module 1","heading":"Vectorization","text":"main advantage vectors R can perform vectorized operations :","code":"\n\n# Adding 1 to each element of vec1\n\nprint(vec1 + 1)\n#> [1] 101   3   4   5   6\n\n# For each element of the vector (1:3), raising 2 to the power of its elements\n\nprint(2^(1:3))\n#> [1] 2 4 8\n\n# Doing elementwise addition (you can do it with all arithmetic operations)\n\nprint(c(1, 2, 3) + c(4, 5, 6))\n#> [1] 5 7 9\n\n# Be careful! vectors should have the same length, otherwise it will recycle\n# values of the shorter vector\n\nprint(c(1, 2, 3) + c(4, 5, 6, 7)) \n#> Warning in c(1, 2, 3) + c(4, 5, 6, 7): longer object length\n#> is not a multiple of shorter object length\n#> [1] 5 7 9 8\n\n# Checking whether 2 is in vec1 using %in% function\n\nprint(2 %in% vec1)\n#> [1] TRUE"},{"path":"module-1.html","id":"vectors-are-homogeneous","chapter":"Module 1","heading":"Vectors Are Homogeneous!","text":"main disadvantage vectors R can store homogeneous data (data type). elements vector different data types, vector convert types elements type: Question: want store heterogeneous data (data different types)?Solution: Use Lists.","code":"\n\n# R will convert all elements of vec12 into characters, because vectors can only \n#contain homogeneous data\n\nvec12 <- c(2, 3.5, \"fall\", 2.7)   \n\nprint(vec12)\n#> [1] \"2\"    \"3.5\"  \"fall\" \"2.7\"\n\nclass(vec12)\n#> [1] \"character\""},{"path":"module-1.html","id":"lists","chapter":"Module 1","heading":"Lists","text":"","code":""},{"path":"module-1.html","id":"creating-lists","chapter":"Module 1","heading":"Creating Lists","text":"can create list using list() function:","code":"\n\nlist1 <- list(2, 3.5, \"fall\", 2.7)\n\nprint(list1)\n#> [[1]]\n#> [1] 2\n#> \n#> [[2]]\n#> [1] 3.5\n#> \n#> [[3]]\n#> [1] \"fall\"\n#> \n#> [[4]]\n#> [1] 2.7\n\n\nlist2 <- list(c(2,4,10), c(\"one\", \"two\", \"three\"), 45)\n\nprint(list2)\n#> [[1]]\n#> [1]  2  4 10\n#> \n#> [[2]]\n#> [1] \"one\"   \"two\"   \"three\"\n#> \n#> [[3]]\n#> [1] 45"},{"path":"module-1.html","id":"subsettingindexing-lists-using-square-brackets-single-and-double-and","chapter":"Module 1","heading":"Subsetting/Indexing Lists Using Square Brackets (Single and Double), [] and [[]]","text":"","code":"\n\n# Selecting the first element of the list2 as a list\n\nlist2[1] \n#> [[1]]\n#> [1]  2  4 10\n\n# Selecting the first element of the list2 as it is\n\nlist2[[1]]                                    \n#> [1]  2  4 10\n\n# Selecting the second element of the first element of the list2\n\nlist2[[1]][2]                                 \n#> [1] 4"},{"path":"module-1.html","id":"merging-lists","chapter":"Module 1","heading":"Merging Lists","text":"can merge lists using c() list() functions. Can tell difference outputs functions produce?c() function merged elements list list b created list containing 6 elements. contrast, list() function created list containing two elements, list list b.","code":"\n\na <- list(1, 2, 3)\n\nb <- list (4, 5, 6)\n\nmerged_list1 <- c(a, b) \n\nprint(merged_list1)\n#> [[1]]\n#> [1] 1\n#> \n#> [[2]]\n#> [1] 2\n#> \n#> [[3]]\n#> [1] 3\n#> \n#> [[4]]\n#> [1] 4\n#> \n#> [[5]]\n#> [1] 5\n#> \n#> [[6]]\n#> [1] 6\n\nmerged_list2 <- list(a, b)  \n\nprint(merged_list2)\n#> [[1]]\n#> [[1]][[1]]\n#> [1] 1\n#> \n#> [[1]][[2]]\n#> [1] 2\n#> \n#> [[1]][[3]]\n#> [1] 3\n#> \n#> \n#> [[2]]\n#> [[2]][[1]]\n#> [1] 4\n#> \n#> [[2]][[2]]\n#> [1] 5\n#> \n#> [[2]][[3]]\n#> [1] 6"},{"path":"module-1.html","id":"flattening-lists-into-vectors","chapter":"Module 1","heading":"Flattening Lists into Vectors","text":"can convert list vector using unlist() function:","code":"\n\nlist3 <- list (c(1,2,3), 45, c(20, -5))\n\nunlist(list3)                           \n#> [1]  1  2  3 45 20 -5"},{"path":"module-1.html","id":"manipulating-elements-in-a-list","chapter":"Module 1","heading":"Manipulating Elements in a List","text":"Adding element list:Removing element list:Changing values elements list:","code":"\n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 45\n#> \n#> [[3]]\n#> [1] 20 -5\n\nlist3[4] <- 100   \n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 45\n#> \n#> [[3]]\n#> [1] 20 -5\n#> \n#> [[4]]\n#> [1] 100\n\n# Removing the second element in the list3\n\nlist3[2] <- NULL                           \n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 20 -5\n#> \n#> [[3]]\n#> [1] 100\n\n# Changing the second element of the first element of the list3\n\nlist3[[1]][3] <- 50                       \n\nprint(list3)\n#> [[1]]\n#> [1]  1  2 50\n#> \n#> [[2]]\n#> [1] 20 -5\n#> \n#> [[3]]\n#> [1] 100"},{"path":"module-2.html","id":"module-2","chapter":"Module 2","heading":"Module 2","text":" ","code":""},{"path":"module-2.html","id":"data-structures-part-ii","chapter":"Module 2","heading":"Data Structures (Part II)","text":" continue exploring different data structures R programming language. module discuss matrices data frames.","code":""},{"path":"module-2.html","id":"matrices","chapter":"Module 2","heading":"Matrices","text":"Matrices R objects elements arranged two-dimensional rectangular layout (columns rows). column vertical representation data, row horizontal representation data. Like vectors, matrices work homogeneous data .","code":""},{"path":"module-2.html","id":"creating-matrices","chapter":"Module 2","heading":"Creating Matrices","text":"use matrix() function create matrix. following arguments (input values):matrix(data, nrow, ncol, byrow, dimnames)data input vector becomes data elements matrixnrow number rows createdncol number columns createdbyrow logical argument. TRUE input vector elements arranged rowdimname names assigned rows columns let’s create matrix containing c(1:12) elements:","code":"\n\n# Elements are arranged sequentially by row\n\nmatrix_1 <- matrix(c(1:12), nrow = 4, byrow = TRUE)\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\n\n# Elements are arranged sequentially by column\n\nmatrix_2 <- matrix(c(1:12), nrow = 4, byrow = FALSE)\n\nprint(matrix_2)\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12\n\n\n# Specifying the number of columns instead\n\nmatrix_3 <- matrix(c(1:12), ncol = 4, byrow = TRUE)\n\nprint(matrix_3)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3    4\n#> [2,]    5    6    7    8\n#> [3,]    9   10   11   12\n\n\n# Defining names of columns and rows in a matrix\n\nrows <- c(\"row1\", \"row2\", \"row3\", \"row4\")\n\ncols <- c(\"col1\", \"col2\", \"col3\")\n\nmatrix_4 <- matrix(c(1:12), nrow = 4, byrow = TRUE, dimnames = list(rows, cols))\n\nprint(matrix_4)\n#>      col1 col2 col3\n#> row1    1    2    3\n#> row2    4    5    6\n#> row3    7    8    9\n#> row4   10   11   12"},{"path":"module-2.html","id":"accessing-matrix-elements","chapter":"Module 2","heading":"Accessing Matrix Elements","text":"Elements matrix can accessed using column row index element square brackets:","code":"\n\n# Accessing the element in 3rd columns and 1st row\n\nmatrix_1[1, 3]\n#> [1] 3\n\n# Accessing the element in 2nd column and 4th row\n\nmatrix_1[4, 2]\n#> [1] 11\n\n# Accessing only the 2nd row\n\nmatrix_1[2, ]\n#> [1] 4 5 6\n\n# Accessing only the 3rd column\n\nmatrix_1[, 3]\n#> [1]  3  6  9 12\n\n# Accessing only the 2nd and 3rd rows \n\nmatrix_1[c(2,3), ]\n#>      [,1] [,2] [,3]\n#> [1,]    4    5    6\n#> [2,]    7    8    9"},{"path":"module-2.html","id":"adding-and-removing-rows-columns","chapter":"Module 2","heading":"Adding and Removing Rows & Columns","text":"Use cbind() function add additional columns matrix:Use rbind() function add additional rows matrix:Use c() function negative indexes remove rows columns matrix:","code":"\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\nmatrix_5 <- cbind(matrix_1, c(10, 20, 30, 40))\n\nprint(matrix_5)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3   10\n#> [2,]    4    5    6   20\n#> [3,]    7    8    9   30\n#> [4,]   10   11   12   40\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\nmatrix_6 <- rbind(matrix_1, c(10, 20, 30))\n\nprint(matrix_6)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n#> [5,]   10   20   30\n\n# Removing the 1st and 2nd rows and 1st column from a matrix\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\nmatrix_7 <- matrix_1[c(-1, -2), c(-1)]\n\nprint(matrix_7)\n#>      [,1] [,2]\n#> [1,]    8    9\n#> [2,]   11   12"},{"path":"module-2.html","id":"assigning-values-to-matrix-elements","chapter":"Module 2","heading":"Assigning Values to Matrix Elements","text":"","code":"\n\n# Assigning a single value\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\nmatrix_1[1, 1] <- 100\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]  100    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\n# Assigning a row\n\nmatrix_1[2, ] <- c(11, 22, 33)\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]  100    2    3\n#> [2,]   11   22   33\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\n# Replace elements that are equal to 8 with 0\n\nmatrix_1[matrix_1 == 8] <- 0\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]  100    2    3\n#> [2,]   11   22   33\n#> [3,]    7    0    9\n#> [4,]   10   11   12"},{"path":"module-2.html","id":"matrix-operations","chapter":"Module 2","heading":"Matrix Operations","text":"","code":"\n\nmatrix_8 <- matrix(1:8, nrow = 4, byrow = T)\n\nprint(matrix_8)\n#>      [,1] [,2]\n#> [1,]    1    2\n#> [2,]    3    4\n#> [3,]    5    6\n#> [4,]    7    8\n\nmatrix_9 <- matrix(1:8, nrow = 4, byrow = T)\n\nprint(matrix_9)\n#>      [,1] [,2]\n#> [1,]    1    2\n#> [2,]    3    4\n#> [3,]    5    6\n#> [4,]    7    8\n\n# Elementwise Addition\n\nprint(matrix_8 + matrix_9)\n#>      [,1] [,2]\n#> [1,]    2    4\n#> [2,]    6    8\n#> [3,]   10   12\n#> [4,]   14   16\n\n# Elementwise Subtraction\n\nprint(matrix_8 - matrix_9)\n#>      [,1] [,2]\n#> [1,]    0    0\n#> [2,]    0    0\n#> [3,]    0    0\n#> [4,]    0    0\n\n# Elementwise Multiplication\n\nprint(matrix_8 * matrix_9)\n#>      [,1] [,2]\n#> [1,]    1    4\n#> [2,]    9   16\n#> [3,]   25   36\n#> [4,]   49   64\n\n# Elementwise Division\n\nprint(matrix_8 / matrix_9)\n#>      [,1] [,2]\n#> [1,]    1    1\n#> [2,]    1    1\n#> [3,]    1    1\n#> [4,]    1    1\n\n# Multiplication by Constant\n\nprint(2 * matrix_8)\n#>      [,1] [,2]\n#> [1,]    2    4\n#> [2,]    6    8\n#> [3,]   10   12\n#> [4,]   14   16\n\n# Matrix Multiplication\n\nmatrix_10 <- matrix(1:8, nrow = 2, byrow = T)\n\nprint(matrix_10)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3    4\n#> [2,]    5    6    7    8\n\nprint(matrix_8 %*% matrix_10)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]   11   14   17   20\n#> [2,]   23   30   37   44\n#> [3,]   35   46   57   68\n#> [4,]   47   62   77   92\n\n# Matrix Transpose\n\nprint(t(matrix_8))\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    3    5    7\n#> [2,]    2    4    6    8"},{"path":"module-2.html","id":"matrix-dimensions","chapter":"Module 2","heading":"Matrix Dimensions","text":"Use dim() function check matrix dimensions:length() function, applied matrix, shows many elements stored matrix:","code":"\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]  100    2    3\n#> [2,]   11   22   33\n#> [3,]    7    0    9\n#> [4,]   10   11   12\n\ndim(matrix_1)\n#> [1] 4 3\n\nlength(matrix_1)\n#> [1] 12"},{"path":"module-2.html","id":"data-frames","chapter":"Module 2","heading":"Data Frames","text":"data frame table column contains values one variable row contains one set values column. words, data structure represents cases observations (rows) measurements (columns). Following characteristics data frame:column names non-emptyThe data stored data frame can numeric, factor (discussed later), character typeEach column contain number data items","code":""},{"path":"module-2.html","id":"creating-a-data-frame","chapter":"Module 2","heading":"Creating a Data Frame","text":"can use data.frame() function create data frame set vectors:can use srt() function check structure data frame summary() get quick summary variables stored data frame:head() tail() functions allow us view first last 6 rows data frame, respectively (number rows can specified argument):Use colnames() function get list column names change names columns data frame:","code":"\n\nName <- c(\"James\", \"Linda\", \"Stacy\", \"Mary\", \"Tom\", \"Anna\", \"Bob\", \"Jeniffer\", \"Lucas\", \"Amy\")\n\nAge <- c(22, 56, 34, 48, 19, 31, 68, 72, 39, 52)\n\nState <- c(\"California\", \"New York\", \"New York\", \"Michigan\", \"Texas\", \"Ohio\", \"Arizona\", \"Florida\", \"Nebraska\", \"Indiana\")\n\nSalary <- c(30000, 96500, 72000, 54300, 25000, 61000, 74700, 40000, 83000, 92400)\n\ndf <- data.frame(Name, Age, State, Salary)\n\nprint(df)\n#>        Name Age      State Salary\n#> 1     James  22 California  30000\n#> 2     Linda  56   New York  96500\n#> 3     Stacy  34   New York  72000\n#> 4      Mary  48   Michigan  54300\n#> 5       Tom  19      Texas  25000\n#> 6      Anna  31       Ohio  61000\n#> 7       Bob  68    Arizona  74700\n#> 8  Jeniffer  72    Florida  40000\n#> 9     Lucas  39   Nebraska  83000\n#> 10      Amy  52    Indiana  92400\n\n# Data frame structure\n\nstr(df)\n#> 'data.frame':    10 obs. of  4 variables:\n#>  $ Name  : chr  \"James\" \"Linda\" \"Stacy\" \"Mary\" ...\n#>  $ Age   : num  22 56 34 48 19 31 68 72 39 52\n#>  $ State : chr  \"California\" \"New York\" \"New York\" \"Michigan\" ...\n#>  $ Salary: num  30000 96500 72000 54300 25000 61000 74700 40000 83000 92400\n\n# Summary of variables stored in a data frame\n\nsummary(df)\n#>      Name                Age           State          \n#>  Length:10          Min.   :19.00   Length:10         \n#>  Class :character   1st Qu.:31.75   Class :character  \n#>  Mode  :character   Median :43.50   Mode  :character  \n#>                     Mean   :44.10                     \n#>                     3rd Qu.:55.00                     \n#>                     Max.   :72.00                     \n#>      Salary     \n#>  Min.   :25000  \n#>  1st Qu.:43575  \n#>  Median :66500  \n#>  Mean   :62890  \n#>  3rd Qu.:80925  \n#>  Max.   :96500\n\nhead(df)\n#>    Name Age      State Salary\n#> 1 James  22 California  30000\n#> 2 Linda  56   New York  96500\n#> 3 Stacy  34   New York  72000\n#> 4  Mary  48   Michigan  54300\n#> 5   Tom  19      Texas  25000\n#> 6  Anna  31       Ohio  61000\n\ntail(df)\n#>        Name Age    State Salary\n#> 5       Tom  19    Texas  25000\n#> 6      Anna  31     Ohio  61000\n#> 7       Bob  68  Arizona  74700\n#> 8  Jeniffer  72  Florida  40000\n#> 9     Lucas  39 Nebraska  83000\n#> 10      Amy  52  Indiana  92400\n\nhead(df, 3)\n#>    Name Age      State Salary\n#> 1 James  22 California  30000\n#> 2 Linda  56   New York  96500\n#> 3 Stacy  34   New York  72000\n\ncolnames(df)\n#> [1] \"Name\"   \"Age\"    \"State\"  \"Salary\"\n\ncolnames(df)[1] <- \"NAME\"\n\nprint(df)\n#>        NAME Age      State Salary\n#> 1     James  22 California  30000\n#> 2     Linda  56   New York  96500\n#> 3     Stacy  34   New York  72000\n#> 4      Mary  48   Michigan  54300\n#> 5       Tom  19      Texas  25000\n#> 6      Anna  31       Ohio  61000\n#> 7       Bob  68    Arizona  74700\n#> 8  Jeniffer  72    Florida  40000\n#> 9     Lucas  39   Nebraska  83000\n#> 10      Amy  52    Indiana  92400\n\ncolnames(df) <- c(\"NAME\", \"AGE\", \"STATE\", \"SALARY\")\n\nprint(df)\n#>        NAME AGE      STATE SALARY\n#> 1     James  22 California  30000\n#> 2     Linda  56   New York  96500\n#> 3     Stacy  34   New York  72000\n#> 4      Mary  48   Michigan  54300\n#> 5       Tom  19      Texas  25000\n#> 6      Anna  31       Ohio  61000\n#> 7       Bob  68    Arizona  74700\n#> 8  Jeniffer  72    Florida  40000\n#> 9     Lucas  39   Nebraska  83000\n#> 10      Amy  52    Indiana  92400"},{"path":"module-2.html","id":"subsettingextracting-elementscolumnsrows-from-a-data-frame","chapter":"Module 2","heading":"Subsetting/Extracting Elements/Columns/Rows from a Data Frame","text":"can use [], $, [[]] extract elements, columns, rows data frame (uses rule matrices):","code":"\n\n# Extracting the first column using its position; output: data frame\n\ndf[1]\n#>        NAME\n#> 1     James\n#> 2     Linda\n#> 3     Stacy\n#> 4      Mary\n#> 5       Tom\n#> 6      Anna\n#> 7       Bob\n#> 8  Jeniffer\n#> 9     Lucas\n#> 10      Amy\n\n# Extracting the first column using its position; output: vector\n\ndf[[1]]\n#>  [1] \"James\"    \"Linda\"    \"Stacy\"    \"Mary\"     \"Tom\"     \n#>  [6] \"Anna\"     \"Bob\"      \"Jeniffer\" \"Lucas\"    \"Amy\"\n\n# Extracting a column using its name; output: data frame\n\ndf[\"AGE\"]\n#>    AGE\n#> 1   22\n#> 2   56\n#> 3   34\n#> 4   48\n#> 5   19\n#> 6   31\n#> 7   68\n#> 8   72\n#> 9   39\n#> 10  52\n\ndf[c(\"AGE\", \"STATE\")]\n#>    AGE      STATE\n#> 1   22 California\n#> 2   56   New York\n#> 3   34   New York\n#> 4   48   Michigan\n#> 5   19      Texas\n#> 6   31       Ohio\n#> 7   68    Arizona\n#> 8   72    Florida\n#> 9   39   Nebraska\n#> 10  52    Indiana\n\n# Extracting a column using its name; output: vector\n\ndf[[\"AGE\"]]\n#>  [1] 22 56 34 48 19 31 68 72 39 52\n\n# Extracting a column using its name and '$' operator; output: vector\n\ndf$AGE\n#>  [1] 22 56 34 48 19 31 68 72 39 52\n\n# Extracting a single element\n\ndf[1, 2]\n#> [1] 22\n\n# Extracting multiple elements\n\ndf[1:4, c(1, 3)]\n#>    NAME      STATE\n#> 1 James California\n#> 2 Linda   New York\n#> 3 Stacy   New York\n#> 4  Mary   Michigan\n\n# Extracting the first row only\n\ndf[1, ]\n#>    NAME AGE      STATE SALARY\n#> 1 James  22 California  30000\n\n# Extracting the third column only\n\ndf[, 3]\n#>  [1] \"California\" \"New York\"   \"New York\"   \"Michigan\"  \n#>  [5] \"Texas\"      \"Ohio\"       \"Arizona\"    \"Florida\"   \n#>  [9] \"Nebraska\"   \"Indiana\"\n\n# Extracting all elements except the second column\n\ndf[, -2]\n#>        NAME      STATE SALARY\n#> 1     James California  30000\n#> 2     Linda   New York  96500\n#> 3     Stacy   New York  72000\n#> 4      Mary   Michigan  54300\n#> 5       Tom      Texas  25000\n#> 6      Anna       Ohio  61000\n#> 7       Bob    Arizona  74700\n#> 8  Jeniffer    Florida  40000\n#> 9     Lucas   Nebraska  83000\n#> 10      Amy    Indiana  92400\n\n# Extracting elements using logical operator\n\ndf[df$AGE < 50, ]\n#>    NAME AGE      STATE SALARY\n#> 1 James  22 California  30000\n#> 3 Stacy  34   New York  72000\n#> 4  Mary  48   Michigan  54300\n#> 5   Tom  19      Texas  25000\n#> 6  Anna  31       Ohio  61000\n#> 9 Lucas  39   Nebraska  83000"},{"path":"module-2.html","id":"assigning-new-value-to-data-frame-elements","chapter":"Module 2","heading":"Assigning New Value to Data Frame Elements","text":"Like matrices, can use <- operator assign values:","code":"\n\ndf[1, 4] <- 100000\n\nprint(df)\n#>        NAME AGE      STATE SALARY\n#> 1     James  22 California 100000\n#> 2     Linda  56   New York  96500\n#> 3     Stacy  34   New York  72000\n#> 4      Mary  48   Michigan  54300\n#> 5       Tom  19      Texas  25000\n#> 6      Anna  31       Ohio  61000\n#> 7       Bob  68    Arizona  74700\n#> 8  Jeniffer  72    Florida  40000\n#> 9     Lucas  39   Nebraska  83000\n#> 10      Amy  52    Indiana  92400"},{"path":"module-2.html","id":"addingremoving-columnsrows","chapter":"Module 2","heading":"Adding/Removing Columns/Rows","text":"","code":"\n\n# Adding a new column using `$` operator\n\ndf$EXPERIENCE = c(2, 30, 10, 22, 1, 12, 40, 55, 15, 22)\n\nprint(df)\n#>        NAME AGE      STATE SALARY EXPERIENCE\n#> 1     James  22 California 100000          2\n#> 2     Linda  56   New York  96500         30\n#> 3     Stacy  34   New York  72000         10\n#> 4      Mary  48   Michigan  54300         22\n#> 5       Tom  19      Texas  25000          1\n#> 6      Anna  31       Ohio  61000         12\n#> 7       Bob  68    Arizona  74700         40\n#> 8  Jeniffer  72    Florida  40000         55\n#> 9     Lucas  39   Nebraska  83000         15\n#> 10      Amy  52    Indiana  92400         22\n\n# Adding a new column using `cbind()` function\n\nSex <- c(\"Male\", \"Female\", \"Female\", \"Female\", \"Male\", \"Female\", \"Male\", \"Female\", \"Male\", \"Female\")\n\ndf_2 <- cbind(df, Sex)\n\nprint(df_2)\n#>        NAME AGE      STATE SALARY EXPERIENCE    Sex\n#> 1     James  22 California 100000          2   Male\n#> 2     Linda  56   New York  96500         30 Female\n#> 3     Stacy  34   New York  72000         10 Female\n#> 4      Mary  48   Michigan  54300         22 Female\n#> 5       Tom  19      Texas  25000          1   Male\n#> 6      Anna  31       Ohio  61000         12 Female\n#> 7       Bob  68    Arizona  74700         40   Male\n#> 8  Jeniffer  72    Florida  40000         55 Female\n#> 9     Lucas  39   Nebraska  83000         15   Male\n#> 10      Amy  52    Indiana  92400         22 Female\n\n# Adding a new row using `rbind()` function\n\nnew_obs <- data.frame(NAME = \"Jack\", AGE = 41, STATE = \"Texas\", SALARY = 150000, EXPERIENCE = 20)\n\ndf_3 <- rbind(df, new_obs)\n\nprint(df_3)\n#>        NAME AGE      STATE SALARY EXPERIENCE\n#> 1     James  22 California 100000          2\n#> 2     Linda  56   New York  96500         30\n#> 3     Stacy  34   New York  72000         10\n#> 4      Mary  48   Michigan  54300         22\n#> 5       Tom  19      Texas  25000          1\n#> 6      Anna  31       Ohio  61000         12\n#> 7       Bob  68    Arizona  74700         40\n#> 8  Jeniffer  72    Florida  40000         55\n#> 9     Lucas  39   Nebraska  83000         15\n#> 10      Amy  52    Indiana  92400         22\n#> 11     Jack  41      Texas 150000         20\n\n# Removing columns from a data frame using a `c()` function\n\ndf_4 <- df_3[, -4]\n\nprint(df_4)\n#>        NAME AGE      STATE EXPERIENCE\n#> 1     James  22 California          2\n#> 2     Linda  56   New York         30\n#> 3     Stacy  34   New York         10\n#> 4      Mary  48   Michigan         22\n#> 5       Tom  19      Texas          1\n#> 6      Anna  31       Ohio         12\n#> 7       Bob  68    Arizona         40\n#> 8  Jeniffer  72    Florida         55\n#> 9     Lucas  39   Nebraska         15\n#> 10      Amy  52    Indiana         22\n#> 11     Jack  41      Texas         20\n\n# Removing columns by assigning a `NULL` value\n\ndf_3[c(\"AGE\", \"SALARY\")] <- NULL\n\nprint(df_3)\n#>        NAME      STATE EXPERIENCE\n#> 1     James California          2\n#> 2     Linda   New York         30\n#> 3     Stacy   New York         10\n#> 4      Mary   Michigan         22\n#> 5       Tom      Texas          1\n#> 6      Anna       Ohio         12\n#> 7       Bob    Arizona         40\n#> 8  Jeniffer    Florida         55\n#> 9     Lucas   Nebraska         15\n#> 10      Amy    Indiana         22\n#> 11     Jack      Texas         20\n\n# Removing rows from a data frame\n\ndf_3[-11, ]\n#>        NAME      STATE EXPERIENCE\n#> 1     James California          2\n#> 2     Linda   New York         30\n#> 3     Stacy   New York         10\n#> 4      Mary   Michigan         22\n#> 5       Tom      Texas          1\n#> 6      Anna       Ohio         12\n#> 7       Bob    Arizona         40\n#> 8  Jeniffer    Florida         55\n#> 9     Lucas   Nebraska         15\n#> 10      Amy    Indiana         22"},{"path":"module-2.html","id":"re-ordering-columnsrows-in-a-data-frame","chapter":"Module 2","heading":"Re-ordering Columns/Rows in a Data Frame","text":"order re-order columns data frame, pass vector desired order columns using [] operator:","code":"\n\n# Re-ordering columns in a data frame\n\ndf_3[, c(\"EXPERIENCE\", \"NAME\", \"STATE\")]\n#>    EXPERIENCE     NAME      STATE\n#> 1           2    James California\n#> 2          30    Linda   New York\n#> 3          10    Stacy   New York\n#> 4          22     Mary   Michigan\n#> 5           1      Tom      Texas\n#> 6          12     Anna       Ohio\n#> 7          40      Bob    Arizona\n#> 8          55 Jeniffer    Florida\n#> 9          15    Lucas   Nebraska\n#> 10         22      Amy    Indiana\n#> 11         20     Jack      Texas\n\n# Re-ordering rows in a data frame\n\ndf_3[order(df_3$EXPERIENCE), ]     # Ascending order\n#>        NAME      STATE EXPERIENCE\n#> 5       Tom      Texas          1\n#> 1     James California          2\n#> 3     Stacy   New York         10\n#> 6      Anna       Ohio         12\n#> 9     Lucas   Nebraska         15\n#> 11     Jack      Texas         20\n#> 4      Mary   Michigan         22\n#> 10      Amy    Indiana         22\n#> 2     Linda   New York         30\n#> 7       Bob    Arizona         40\n#> 8  Jeniffer    Florida         55\n\ndf_3[order(df_3$EXPERIENCE, decreasing = TRUE), ] # Descending order\n#>        NAME      STATE EXPERIENCE\n#> 8  Jeniffer    Florida         55\n#> 7       Bob    Arizona         40\n#> 2     Linda   New York         30\n#> 4      Mary   Michigan         22\n#> 10      Amy    Indiana         22\n#> 11     Jack      Texas         20\n#> 9     Lucas   Nebraska         15\n#> 6      Anna       Ohio         12\n#> 3     Stacy   New York         10\n#> 1     James California          2\n#> 5       Tom      Texas          1"},{"path":"module-2.html","id":"checking-dimensions-of-a-data-frame","chapter":"Module 2","heading":"Checking Dimensions of a Data Frame","text":"","code":"\n\n# Data frame dimensions\n\ndim(df)\n#> [1] 10  5\n\n# Number of columns in a data frame\n\nncol(df)\n#> [1] 5\n\n# Number of rows in a data frame\n\nnrow(df)\n#> [1] 10"},{"path":"module-2.html","id":"factors","chapter":"Module 2","heading":"Factors","text":"Factor special type vectors used categorize data store levels. can store character integer types data. useful columns limited number unique values. instance, Female Male, TRUE FALSE etc.","code":""},{"path":"module-2.html","id":"creating-factors","chapter":"Module 2","heading":"Creating Factors","text":"Use factor() function R create factor:create ordered factor, use order argument inside factor() function:can convert numeric variable factor dividing intervals (segments) using cut() function:can even add labels groups:","code":"\n\nvec1 <- c(\"YES\", \"NO\", \"YES\", \"YES\", \"YES\", \"NO\", \"NO\", \"YES\")\n\nprint(vec1)\n#> [1] \"YES\" \"NO\"  \"YES\" \"YES\" \"YES\" \"NO\"  \"NO\"  \"YES\"\n\nis.factor(vec1)\n#> [1] FALSE\n\nfac1 <- factor(vec1)\n\nprint(fac1)\n#> [1] YES NO  YES YES YES NO  NO  YES\n#> Levels: NO YES\n\nis.factor(fac1)\n#> [1] TRUE\n\n\n#############\n\n\nvec2 <- c(\"Jazz\", \"Rock\", \"Classic\", \"Pop\", \"Classic\", \"Jazz\", \"Jazz\", \"Rock\")\n\nfac2 <- factor(vec2)\n\nprint(fac2)\n#> [1] Jazz    Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\n\n#############\n\n\nvec3 <- c(1, 2, 3, 2, 2, 3, 1, 3, 2, 3, 1, 1)\n\nfac3 <- factor(vec3)\n\nprint(fac3)\n#>  [1] 1 2 3 2 2 3 1 3 2 3 1 1\n#> Levels: 1 2 3\n\nfac4 <- factor(vec3, ordered = TRUE)\n\nprint(fac4)\n#>  [1] 1 2 3 2 2 3 1 3 2 3 1 1\n#> Levels: 1 < 2 < 3\n\nage_factored <- cut(df_4$AGE, 3)\n\nprint(age_factored)\n#>  [1] (18.9,36.7] (54.3,72.1] (18.9,36.7] (36.7,54.3]\n#>  [5] (18.9,36.7] (18.9,36.7] (54.3,72.1] (54.3,72.1]\n#>  [9] (36.7,54.3] (36.7,54.3] (36.7,54.3]\n#> Levels: (18.9,36.7] (36.7,54.3] (54.3,72.1]\n\nage_factored <- cut(df_4$AGE, 3, labels = c(\"Group1\", \"Group2\", \"Group3\"))\n\nprint(age_factored)\n#>  [1] Group1 Group3 Group1 Group2 Group1 Group1 Group3 Group3\n#>  [9] Group2 Group2 Group2\n#> Levels: Group1 Group2 Group3"},{"path":"module-2.html","id":"factor-levels","chapter":"Module 2","heading":"Factor Levels","text":"Use levels() function see levels factor variable :can also set levels adding levels argument inside factor() function:can change order levels passing level argument factor function desired order levels:","code":"\n\nlevels(fac1)\n#> [1] \"NO\"  \"YES\"\n\nlevels(fac2)\n#> [1] \"Classic\" \"Jazz\"    \"Pop\"     \"Rock\"\n\nlevels(fac3)\n#> [1] \"1\" \"2\" \"3\"\n\nlevels(fac4)\n#> [1] \"1\" \"2\" \"3\"\n\n\nvec2 <- c(\"Jazz\", \"Rock\", \"Classic\", \"Pop\", \"Classic\", \"Jazz\", \"Jazz\", \"Rock\")\n\nfac5 <- factor(vec2, levels = c(\"Classic\", \"Jazz\", \"Pop\", \"Rock\", \"Other\"))\n\nprint(fac5)\n#> [1] Jazz    Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock Other\n\n\nprint(fac3)\n#>  [1] 1 2 3 2 2 3 1 3 2 3 1 1\n#> Levels: 1 2 3\n\nfac6 <- factor(vec3, levels = c(3, 1, 2))\n\nprint(fac6)\n#>  [1] 1 2 3 2 2 3 1 3 2 3 1 1\n#> Levels: 3 1 2"},{"path":"module-2.html","id":"accessing-factor-elements","chapter":"Module 2","heading":"Accessing Factor Elements","text":"can access elements stored factor way done vectors, using [].","code":""},{"path":"module-2.html","id":"assigningchanging-values-toof-factor-elements","chapter":"Module 2","heading":"Assigning/Changing Values to/of Factor Elements","text":"can assign new value factor elements using assignment sign <-:happens assign new value already specified factor levels?generate NA, Opera option among levels specified variable. add value, first need add levels:","code":"\n\nprint(fac2)\n#> [1] Jazz    Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\nfac2[1] <- \"Classic\"\n\nprint(fac2)\n#> [1] Classic Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\nprint(fac2)\n#> [1] Classic Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\nfac2[1] <- \"Opera\"\n#> Warning in `[<-.factor`(`*tmp*`, 1, value = \"Opera\"):\n#> invalid factor level, NA generated\n\nprint(fac2)\n#> [1] <NA>    Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\nfac7 <- factor(fac2, levels = c(\"Classic\", \"Jazz\", \"Pop\", \"Rock\", \"Other\", \"Opera\"))\n\nfac7[1] <- \"Opera\"\n\nprint(fac7)\n#> [1] Opera   Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock Other Opera"},{"path":"module-2.html","id":"generating-factors","chapter":"Module 2","heading":"Generating Factors","text":"can generate factor levels using gl() function. takes two integers input indicates many levels many times level.","code":"\n\nfac8 <- gl(4, 5, labels = c(\"Fall\", \"Winter\", \"Spring\", \"Summer\"))\n\nprint(fac8)\n#>  [1] Fall   Fall   Fall   Fall   Fall   Winter Winter Winter\n#>  [9] Winter Winter Spring Spring Spring Spring Spring Summer\n#> [17] Summer Summer Summer Summer\n#> Levels: Fall Winter Spring Summer"},{"path":"module-2.html","id":"counting-factor-elementsfrequency-of-levels","chapter":"Module 2","heading":"Counting Factor Elements/Frequency of Levels","text":"","code":"\n\n# Calculating a number of elements stored in a factor\n\nlength(fac2)\n#> [1] 8\n\n# Displaying a frequency of each level of a factor\n\ntable(fac2)\n#> fac2\n#> Classic    Jazz     Pop    Rock \n#>       2       2       1       2"},{"path":"module-2.html","id":"converting-numeric-data-into-factors-and-back","chapter":"Module 2","heading":"Converting Numeric Data into Factors and Back","text":"","code":"\n\n# Converting numeric data into factors using as.factor() function\n\nvec3 <- c(0, 1, 2, 2, 1, 0, 2, 1, 0)\n\nfac9 <- as.factor(vec3)\n\nprint(fac9)\n#> [1] 0 1 2 2 1 0 2 1 0\n#> Levels: 0 1 2\n\n# Converting factors back into numeric data using as.numeric() function (part I)\n\nas.numeric(fac9)\n#> [1] 1 2 3 3 2 1 3 2 1\n\n# Converting factors back into numeric data using as.numeric() function (part II)\n\nas.numeric(levels(fac9)[fac9])\n#> [1] 0 1 2 2 1 0 2 1 0"},{"path":"module-3.html","id":"module-3","chapter":"Module 3","heading":"Module 3","text":" ","code":""},{"path":"module-3.html","id":"conditional-statements-and-loops","chapter":"Module 3","heading":"Conditional Statements and Loops","text":" Control structures R used control flow execution various R expressions. require programmer specify one conditions evaluated tested program, along statement statements executed condition determined TRUE, optionally, statements executed condition determined FALSE. words, control structures allow respond inputs features data execute different R expressions accordingly.module discuss several commonly used control structures -else statements, loops, well break next commands. move topics, first let’s discuss relational logical operators.","code":""},{"path":"module-3.html","id":"relational-and-logical-operations","chapter":"Module 3","heading":"Relational and Logical Operations","text":"","code":""},{"path":"module-3.html","id":"comparison-operators","chapter":"Module 3","heading":"Comparison Operators","text":" basic relational operators called comparison operators listed table :possible outputs operations either TRUE FALSE. examples comparison operators:applied vectors, operators element-wise comparisons (first element first vector compared first element second vector ). Suppose following two vectors:,","code":"\n\nprint (5 == 5)\n#> [1] TRUE\n\nprint(5 == 7)\n#> [1] FALSE\n\nprint(5 != 5)\n#> [1] FALSE\n\nprint(5 != 10)\n#> [1] TRUE\n\nprint(5 < 2)\n#> [1] FALSE\n\nprint(5 <= 4)\n#> [1] FALSE\n\nx <- c(1, 2, 3, 4)\n\nprint(x)\n#> [1] 1 2 3 4\n\ny <- c(4, 2, 3, 1)\n\nprint(y)\n#> [1] 4 2 3 1\n\nprint(x == y)\n#> [1] FALSE  TRUE  TRUE FALSE\n\nprint(x != y)\n#> [1]  TRUE FALSE FALSE  TRUE\n\nprint(x >= y)\n#> [1] FALSE  TRUE  TRUE  TRUE"},{"path":"module-3.html","id":"logical-operators","chapter":"Module 3","heading":"Logical Operators","text":" Logical operators used combine conditional statements:examples:","code":"\n\n##  & Operator\n\nprint(TRUE & TRUE)\n#> [1] TRUE\n\nprint (TRUE & FALSE)\n#> [1] FALSE\n\nprint(FALSE & FALSE)\n#> [1] FALSE\n\nprint (5 == 5 & 10 < 6)\n#> [1] FALSE\n\nprint(4!= 3 & 2 < 9)\n#> [1] TRUE\n\nprint(x == y & x < y)\n#> [1] FALSE FALSE FALSE FALSE\n\n\n##  | Operator\n\nprint(TRUE | TRUE)\n#> [1] TRUE\n\nprint (TRUE | FALSE)\n#> [1] TRUE\n\nprint(FALSE | FALSE)\n#> [1] FALSE\n\nprint (5 == 5 | 10 < 6)\n#> [1] TRUE\n\nprint(4!= 3 | 2 < 9)\n#> [1] TRUE\n\nprint(x == y | x < y)\n#> [1]  TRUE  TRUE  TRUE FALSE\n\n\n##  ! Operator\n\nprint (!TRUE)\n#> [1] FALSE\n\nprint(!FALSE)\n#> [1] TRUE\n\nprint(!(4<2))\n#> [1] TRUE\n\nprint(!(2 == 2 & 3 < 4))\n#> [1] FALSE"},{"path":"module-3.html","id":"conditional-statements","chapter":"Module 3","heading":"Conditional Statements","text":"","code":""},{"path":"module-3.html","id":"if-statement","chapter":"Module 3","heading":"IF Statement","text":"“statement” written keyword, used specify block code executed condition TRUE:code executed conditional statement inside parentheses FALSE. Check :","code":"\n\nif (5 > 2) {\n  \n  print(\"5 is greater than 2\")\n  \n}\n#> [1] \"5 is greater than 2\"\n\nif (5 < 2) {\n  \n  print(\"5 is greater than 2\")\n  \n}"},{"path":"module-3.html","id":"if---else-statement","chapter":"Module 3","heading":"IF - ELSE Statement","text":"-else combination probably commonly used control structure R. structure allows test condition act depending whether ’s TRUE FALSE. condition TRUE, code given curly brackets clause executed. FALSE, code curly brackets else clause executed:Now try example:can pass many conditions like adding else clause:Try different values:","code":"\n\na <- 5 ; b <- 2\n\n\nif (b > a) {\n  \n  print (\"b is greater than a\")\n  \n} else {\n  \n  print(\"b is not greater than a\")\n}\n#> [1] \"b is not greater than a\"\n\na <- 2 ; b <- 5\n\n\nif (b > a) {\n  \n  print (\"b is greater than a\")\n  \n} else {\n  \n  print(\"b is not greater than a\")\n}\n#> [1] \"b is greater than a\"\nif (b > a) {\n  \n  print (\"b is greater than a\")\n  \n} else if (a == b) {\n  \n  print (\"a and b are equal\")\n  \n} else {\n  \n  print (\"a is greater than b\")\n  \n}\n#> [1] \"b is greater than a\"\na <- 2; b <- 2\n\nif (b > a) {\n  \n  print (\"b is greater than a\")\n  \n} else if (a == b) {\n  \n  print (\"a and b are equal\")\n  \n} else {\n  \n  print (\"a is greater than b\")\n  \n}\n#> [1] \"a and b are equal\""},{"path":"module-3.html","id":"nested-if-else-statements","chapter":"Module 3","heading":"Nested IF-ELSE Statements","text":"can also statements inside statements, called nested statements.Now try x = 15 x = 5:can multiple conditional statements -else clause combined together:","code":"\n\nx <- 50\n\nif (x > 10) {\n  \n  print(\"Above ten\")\n  \n  if (x > 20) {\n    \n    print(\"and also above 20!\")\n    \n  } else {\n    \n    print(\"but not above 20.\")\n    \n  }\n  \n} else {\n  \n  print(\"below 10.\")\n  \n}\n#> [1] \"Above ten\"\n#> [1] \"and also above 20!\"\n\nx <- 15\n\nif (x > 10) {\n  \n  print(\"Above ten\")\n  \n  if (x > 20) {\n    \n    print(\"and also above 20!\")\n    \n  } else {\n    \n    print(\"but not above 20.\")\n    \n  }\n  \n} else {\n  \n  print(\"below 10.\")\n  \n}\n#> [1] \"Above ten\"\n#> [1] \"but not above 20.\"\n\nx <- 5\n\nif (x > 10) {\n  \n  print(\"Above ten\")\n  \n  if (x > 20) {\n    \n    print(\"and also above 20!\")\n    \n  } else {\n    \n    print(\"but not above 20.\")\n    \n  }\n  \n} else {\n  \n  print(\"below 10.\")\n  \n}\n#> [1] \"below 10.\"\n\na <- 200; b <- 33; c <- 500\n\n\n##  &\n\nif (a > b & c == a) {\n  \n  print(\"Both conditions are true\")\n  \n} else {\n  \n  print (\"At least one is false\")\n}\n#> [1] \"At least one is false\"\n\n\n\n##  |\n\nif (a > b | c == a) {\n  \n  print(\"At least one is true\")\n  \n} else {\n  \n  print (\"Both conditions are false\")\n}\n#> [1] \"At least one is true\""},{"path":"module-3.html","id":"ifelse-function","chapter":"Module 3","heading":"ifelse() Function","text":"Given works single TRUE FALSE, might wonder vector logical values. ifelse() can handle vectors logical values. first argument ifelse() function vector logical values,second argument value produces element logical vector TRUE, third argument value produces element logical vector FALSE. Check example :","code":"\nx <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nifelse(x %% 2 == 0, \"even\", \"odd\")\n#>  [1] \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\"\n#>  [9] \"odd\"  \"even\""},{"path":"module-3.html","id":"some-useful-functions-any-and-all","chapter":"Module 3","heading":"Some Useful Functions: any() and all()","text":"() () functions come handy work conditional statement. examples:","code":"\nx <- c(-2, -1, 0, 1, 2)\n\n## all(). It return TRUE if all elements of a vector satisfy the condition\n\nprint(all(x > 0))\n#> [1] FALSE\n\n## any(). It return TRUE if at least one of elements in a vector satisfies the condition\n\nprint(any(x > 0))\n#> [1] TRUE\n\n\n## Here is an example \n\nif(all(x < 0)) {\n  \n  print(\"all are negative\")\n  \n} else {\n  \n  print (\"not all of them are negative\")\n  \n}\n#> [1] \"not all of them are negative\""},{"path":"module-3.html","id":"for-loops","chapter":"Module 3","heading":"For Loops","text":"may situation need execute block code multiple times. general, statements executed sequentially. first statement function executed first, followed second, .Programming languages provide various control structures allow complicated execution paths. loop statement allows us execute statement groups statements multiple times (iterate). sequence instructions repeated certain condition reached. basic commonly used type loops loop. general format loop follows:three key aspects loops: loop object, loop vector, loop code:Loop object: object change iteration loop. usually letter like .Loop vector: vector specifying values loop object take loop. can specify values way ’d like (long ’s vector).Loop code: code executed values loop vector.can find examples loops can utilized:","code":"\n\nfor(loop.object in loop.vector) {\n\n  LOOP.CODE\n\n  }\n\n## Printing numbers from 1 to 10\n\nfor (i in 1:10){\n  \n  print (i)\n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n#> [1] 6\n#> [1] 7\n#> [1] 8\n#> [1] 9\n#> [1] 10\n\n## Printing elements of the vector x\n\nx <- c(10, 20, 30, 40, 50)\n\nfor (i in 1:length(x)){\n  \n  print(x[i])\n  \n}\n#> [1] 10\n#> [1] 20\n#> [1] 30\n#> [1] 40\n#> [1] 50\n\n## Creating and populating an empty vector z\n\nz <- c()   # creating an empty vector.\n\nfor (i in 1:5){\n  \n  z[i] <- 2*i\n  \n}\n\nprint(z)\n#> [1]  2  4  6  8 10\n\n## Creating and populating an empty list\n\na <- list()   # creating an empty list\n\nfor (i in 1:4){\n  \n  a[[i]] <- rnorm(i)\n  \n}\n\nprint(a)\n#> [[1]]\n#> [1] -0.5595863\n#> \n#> [[2]]\n#> [1]  0.9009748 -1.0185693\n#> \n#> [[3]]\n#> [1] -0.7474625  0.5106107 -0.2371168\n#> \n#> [[4]]\n#> [1]  2.1722891 -0.1258743  2.2322454 -0.3042224\n\n## Updating elements of the vector x\n\nx <- c(1, 2, 3, 4, 5)\n\n\nfor (i in 1:length(x)){\n  \n  x[i] <- x[i] ^ 2\n  \n}\n\nprint(x)\n#> [1]  1  4  9 16 25\n## Summing up numbers from 1 to 100\n\ncurrent.sum <- 0\n\n\nfor(i in 1:100) {\n  \n  current.sum <- current.sum + i\n  \n}"},{"path":"module-3.html","id":"break-statement","chapter":"Module 3","heading":"Break Statement","text":"Loop control statements change execution normal sequence. Break statement stops execution loop condition specified met. words, stops looped items example,","code":"\n\nfor(i in 1:60) {\n  \n  if(i > 15){\n    \n    break\n    \n  }\n  \n  print(i)\n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n#> [1] 6\n#> [1] 7\n#> [1] 8\n#> [1] 9\n#> [1] 10\n#> [1] 11\n#> [1] 12\n#> [1] 13\n#> [1] 14\n#> [1] 15"},{"path":"module-3.html","id":"next-statement","chapter":"Module 3","heading":"Next Statement","text":"next statement, can skip undesired iteration without terminating loop:","code":"\n## Skipping even numbers\n\nfor(i in 1:100) {\n  \n  if(i %% 2 == 0){\n    \n    next\n    \n  }\n  \n  print(i)\n  \n}\n#> [1] 1\n#> [1] 3\n#> [1] 5\n#> [1] 7\n#> [1] 9\n#> [1] 11\n#> [1] 13\n#> [1] 15\n#> [1] 17\n#> [1] 19\n#> [1] 21\n#> [1] 23\n#> [1] 25\n#> [1] 27\n#> [1] 29\n#> [1] 31\n#> [1] 33\n#> [1] 35\n#> [1] 37\n#> [1] 39\n#> [1] 41\n#> [1] 43\n#> [1] 45\n#> [1] 47\n#> [1] 49\n#> [1] 51\n#> [1] 53\n#> [1] 55\n#> [1] 57\n#> [1] 59\n#> [1] 61\n#> [1] 63\n#> [1] 65\n#> [1] 67\n#> [1] 69\n#> [1] 71\n#> [1] 73\n#> [1] 75\n#> [1] 77\n#> [1] 79\n#> [1] 81\n#> [1] 83\n#> [1] 85\n#> [1] 87\n#> [1] 89\n#> [1] 91\n#> [1] 93\n#> [1] 95\n#> [1] 97\n#> [1] 99"},{"path":"module-3.html","id":"for-loops-combined-with-if-else-statements","chapter":"Module 3","heading":"For Loops Combined with If-Else Statements","text":"can even combine loops -else statements:","code":"\n\nx <- 1:10\n\nfor (i in 1:length(x)){\n  \n  if(x[i] %% 2 == 0){\n    \n    print(paste(\"The number\", x[i], \"is even\"))\n    \n  } else {\n    \n    print(paste(\"The number\", x[i], \"is odd\"))\n    \n  }\n  \n}\n#> [1] \"The number 1 is odd\"\n#> [1] \"The number 2 is even\"\n#> [1] \"The number 3 is odd\"\n#> [1] \"The number 4 is even\"\n#> [1] \"The number 5 is odd\"\n#> [1] \"The number 6 is even\"\n#> [1] \"The number 7 is odd\"\n#> [1] \"The number 8 is even\"\n#> [1] \"The number 9 is odd\"\n#> [1] \"The number 10 is even\""},{"path":"module-3.html","id":"nested-for-loops","chapter":"Module 3","heading":"Nested For Loops","text":"Nested loops commonly needed multidimensional hierarchical data structures (e.g. matrices, lists). Nesting beyond 2 3 levels often makes difficult read/understand code. find need large number nested loops, may want break loops using functions (discussed next lecture). example nested loop:","code":"\n\n## Creating and populating an empty matrix\n\nmatrix1 <- matrix(ncol = 4, nrow = 5) # creating an empty matrix\n\n\nfor (i in 1:dim(matrix1)[1]){\n  \n  for (j in 1:dim(matrix1)[2]){\n    \n    matrix1[i, j] <- i*j\n    \n  }\n}\n\nprint(matrix1)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3    4\n#> [2,]    2    4    6    8\n#> [3,]    3    6    9   12\n#> [4,]    4    8   12   16\n#> [5,]    5   10   15   20"},{"path":"module-3.html","id":"while-loops","chapter":"Module 3","heading":"While Loops","text":"loops begin testing condition. TRUE, execute loop body. loop body executed, condition tested , forth, condition FALSE, loop exits.","code":"\n\ni <- 1\n\nwhile (i < 10){\n  \n  print(i)\n  \n  i <- i + 1\n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n#> [1] 6\n#> [1] 7\n#> [1] 8\n#> [1] 9"},{"path":"module-3.html","id":"while-loops-with-next-statements","chapter":"Module 3","heading":"While Loops with Next Statements","text":"loops can combined next statements:loops can potentially result infinite loops written properly. Use care! accidentally created executed infinite loops, run forever take storage R. stop infinite loop, press red stop sign shows top right corner console. Can check tell wrong loops given :","code":"\n\n# Printing odd numbers that are less than 15\n\ni <- 0\n\nwhile (i < 15){\n  \n  i <- i + 1\n  \n  if(i %% 2 == 0){\n    \n    next\n  }\n  \n  print(i)\n  \n}\n#> [1] 1\n#> [1] 3\n#> [1] 5\n#> [1] 7\n#> [1] 9\n#> [1] 11\n#> [1] 13\n#> [1] 15\n\ni <- 1\n\nwhile (i < 15){\n  \n  if(i %% 2 == 0){\n    \n    next\n  }\n\n  print(i)\n    \n  i <- i + 1\n  \n}\n\ni <- 1\n\nwhile (i < 15){\n  \n  print(i)\n  \n  if(i %% 2 == 0){\n    \n    next\n  }\n  \n  i <- i + 1\n  \n}\n\ni <- 1\n\nwhile (i < 15){\n  \n  print(i)\n  \n  i <- i + 1\n  \n  if(i %% 2 == 0){\n    \n    next\n  }\n  \n}"},{"path":"module-3.html","id":"while-loops-with-break-statements","chapter":"Module 3","heading":"While Loops with Break Statements","text":"Similarly, loops can combined break statements:Can tell output loops without running ?","code":"\n\ni <- 1\n\nwhile (i < 20){\n  \n  print (i)\n  \n  if (i == 5){\n    \n    break\n    \n  }\n  \n  i <- i + 1\n  \n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\ni <- 1\n\nwhile (i < 20){\n  \n  print (i)\n  \n  if (i == 5){\n    \n    break\n    \n  }\n  \n  i <- i + 1\n  \n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\ni <- 1\n\nwhile (i < 20){\n  \n  if (i == 5){\n    \n    break\n    \n  }\n  \n  print (i)\n  \n  i <- i + 1\n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4"},{"path":"module-4.html","id":"module-4","chapter":"Module 4","heading":"Module 4","text":" ","code":""},{"path":"module-4.html","id":"functions","chapter":"Module 4","heading":"Functions","text":"Now, ’s time discuss one essential concepts R programming, , R functions. Writing functions core activity R programmer. Functions often used encapsulate sequence expressions need executed numerous times, perhaps slightly different conditions. words, functions allow us automate common tasks powerful general way simply copy--pasting. also often written code must shared others public.consider writing function whenever ’ve copied pasted block code twice. module, learn create customized (user-defined) functions discuss essential tools R functions equipped .","code":""},{"path":"module-4.html","id":"creating-a-function","chapter":"Module 4","heading":"Creating a Function","text":"function set statements organized together perform specific task. R large number -built functions user can create functions. R, function object R interpreter able pass control function, along arguments may necessary function accomplish actions.R function created using function() function (Yeah, many functions). basic syntax R function follows:main components R function :Function Name - name function. stored R environment object name.Arguments - argument placeholder. function invoked, pass value argument. Arguments optional; , function may contain arguments. Also arguments can default values. example, arguments arg_1, arg_2 etc.Function Body − function body contains collection statements defines function .Return Value − return value function last expression function body evaluated.example simple function prints \"Hello class 2102!\":call function , use function name followed parenthesis:another example simple function:check collection statements function contains, use function name without parenthesis:","code":"\nfunction_name <- function(arg_1, arg_2, ...) {\n  \n   Function body \n}\n\nfirst_function <- function() { \n  \n  print(\"Hello class 2102!\")\n  \n}\n\nfirst_function()\n#> [1] \"Hello class 2102!\"\n\nnew_function <- function(){\n  \n  for(i in 1:5) {\n    \n    print(i^2)\n    \n  }\n  \n}\n\nnew_function()\n#> [1] 1\n#> [1] 4\n#> [1] 9\n#> [1] 16\n#> [1] 25\n\nnew_function\n#> function () \n#> {\n#>     for (i in 1:5) {\n#>         print(i^2)\n#>     }\n#> }\n#> <bytecode: 0x00000245d940e040>"},{"path":"module-4.html","id":"function-arguments","chapter":"Module 4","heading":"Function Arguments","text":"Information can passed functions arguments. Arguments specified function name, inside parentheses. can add many arguments want, just separate comma. example function single argument:Now let’s create function two arguments:","code":"\n\nfun_1 <- function(x){\n  \n  return(x^2)\n  \n}\n\nfun_1(x = 5)\n#> [1] 25\n\nfun_2 <- function(x, y){\n  \n  return(x - y)\n  \n}\n\nfun_2(x = 5, y = 7)\n#> [1] -2"},{"path":"module-4.html","id":"argument-matching","chapter":"Module 4","heading":"Argument Matching","text":"Calling R function arguments can done variety ways. may confusing first, ’s really handing interactive work command line. R functions arguments can matched name position.matched position, R assigns first value first argument, second value second argument . example, fun_2(5, 7) means R assign 5 x argument 7 y.Now try way around:specifying function arguments name, doesn’t matter order specify :","code":"\n\nfun_2(5, 7)\n#> [1] -2\n\nfun_2(7, 5)\n#> [1] 2\n\nfun_2(x = 5, y = 7)\n#> [1] -2\n\nfun_2(y = 7, x = 5)\n#> [1] -2"},{"path":"module-4.html","id":"number-of-arguments","chapter":"Module 4","heading":"Number of Arguments","text":"default, function must called correct number arguments. Meaning function expects 2 arguments, call function 2 arguments, , less. Try examples see get:","code":"\n\nfun_2(7)\n#> Error in fun_2(7): argument \"y\" is missing, with no default\n\nfun_2(7, 5, 3)\n#> Error in fun_2(7, 5, 3): unused argument (3)"},{"path":"module-4.html","id":"arguments-with-default-values","chapter":"Module 4","heading":"Arguments with Default Values","text":"can assign default values arguments function. call function without argument, uses default value:can still pass new values arguments default settings:R objects various data structures can passed function arguments. instance, pass vectors vec1 vec2 function fun_4:","code":"\n\nfun_3 <- function(x = 2, y){\n  \n  return (x - y)\n  \n}\n\nfun_3(y = 4)\n#> [1] -2\n\nfun_3(x = 10, y = 3)\n#> [1] 7\n\nvec1 <- c(1, 2, 3, 4, 5)\n\nvec2 <- 1:5\n\nfun_4 <- function(x, y){\n  \n  return(x + y)\n  \n}\n\nfun_4(x = vec1, y = vec2)\n#> [1]  2  4  6  8 10"},{"path":"module-4.html","id":"lazy-evaluation","chapter":"Module 4","heading":"Lazy Evaluation","text":"Arguments functions evaluated lazily, evaluated needed body function. example, function fun_5 two arguments, uses one (argument x).calling fun_5(x = 5) produce error, missing argument y used inside body function.omit argument x calling function fun_5, produce error, body function uses x argument produce output:","code":"\n\nfun_5 <- function(x, y){\n  \n  return(x + 2)\n}\n\nfun_5(x = 3)\n#> [1] 5\n\nfun_5(y = 3)\n#> Error in fun_5(y = 3): argument \"x\" is missing, with no default"},{"path":"module-4.html","id":"function-environments-and-global-variables","chapter":"Module 4","heading":"Function Environments and Global Variables","text":"R tries bind value symbol, searches series environments find appropriate value. environment collection (symbol, value) pairs, .e. x symbol 3.14 might value. class, consider two environments: Global Environment Functional Environment.global environment user’s workspace stores R objects create working R. contrast global environment, functional environment contains objects created inside function.call R function, first searches objects function’s environment global environment. instance, compare functions given . output case?another example given , variable b exists environment func_8 . , try print b object separately, R throw error, object exist global environment:Now, want create object inside function accessibly global environment well, use <<- operator:","code":"\n\na <- 5                        # this variable exists in the global environment\n\nfun_6 <- function(x){\n  \n  return(x + a)\n  \n}\n\n\nfun_6(x  = 2)\n#> [1] 7\n\na <- 5                        # this variable exists in the global environment\n\nfun_7 <- function(x){\n  \n  a <- 10                    # this variable exists in the environment of fun_7\n  \n  return(x + a)\n  \n}\n\n\nfun_7(x = 2)\n#> [1] 12\n\nfun_8 <- function(x){\n  \n  a <- 10                   # this variable exists in the environment of fun_8\n  \n  b <- 20                   # this variable exists in the environment of fun_8\n  \n  return(x + a + b)\n  \n}\n\nprint(b)\n#> Error: object 'b' not found\n\nfun_8 <- function(x){\n  \n  a <- 10                   # this variable exists in the environment of fun_8\n  \n  b <<- 20                   # this variable will exist in both global \n                             # and functional environments\n  \n  return(x + a + b)\n  \n}"},{"path":"module-4.html","id":"nested-function","chapter":"Module 4","heading":"Nested Function","text":"Like loops, can produce nested functions putting one function another. example nested function:","code":"\n\nfun_10 <- function(x, y){\n  \n  func_11 <- function(){\n    \n    return(x + y)\n    \n  }\n  \n  return(2*func_11())\n  \n}\n\nfun_10(2, 3)\n#> [1] 10"},{"path":"problem-set-1.html","id":"problem-set-1","chapter":"Problem Set 1","heading":"Problem Set 1","text":" ","code":""},{"path":"problem-set-1.html","id":"problem-1","chapter":"Problem Set 1","heading":"Problem 1","text":" Create vectors containing {3.1, 4.1, 5.1, 6.1, 7.1, 8.1} elements three different ways using following functions: c(), seq() argument, seq() length.argument. Name vector1, vector2, vector3, respectively. Add three new elements vector1: 10, 20, 30. 10 first element vector, 20 3rd element vector given 10 already added , 30 6th element vector given 10 20 already added vector. Create new vector containing {2, 3, 6, 10, 15, 18, 22, 25, 27, 30, 31, 35, 42} elements. Name vector4. Extract/Select elements greater 5 divisible 3 using logical statement create new vector vector5 elements. Check whether element 27 vector5 using logical operator. ","code":""},{"path":"problem-set-1.html","id":"problem-2","chapter":"Problem Set 1","heading":"Problem 2","text":" Create list following elements: [1, 50, 88], [“yesterday”, “today”, “tomorrow”], 22.5, [33.8, 42], “class_0001”. Name list1. Apply unlist() function list1. data type data structure output? think got specific data type? Create new list (name list2) removing third element first element list1. extract/select second third elements second element list2. Create new list following elements: 23, “new”, 45.7. Name list3. Now create new list (name list4) merging list2 list3 c(). many elements list4 contain (use built-function count). Extract first element list4 list vector. ","code":""},{"path":"problem-set-1.html","id":"problem-3","chapter":"Problem Set 1","heading":"Problem 3","text":" Create data frame (name df1) following variables:\nName - {“James”, “Linda”, “Stacy”, “Mary”, “Tom”, “Anna”, “Bob”, “Jeniffer”, “Lucas”, “Amy”, “Jim”}\nMajor - {“Math”, “Math”, “Genetics”, “Statistics”, “Accounting”, “Art”, “Music”, “Business”, “Finance”, “Finance”, “Math”}\nGrad_Year - {2023, 2025, 2025, 2024, 2026, 2024, 2025, 2025, 2023, 2026, 2024}\nGPA - {3.9, 3.75, 4.0, 4.0, 3.4, 3.9, 3.3, 3.8, 3.55, 4.0, 3.6}\nCreate data frame (name df1) following variables:Name - {“James”, “Linda”, “Stacy”, “Mary”, “Tom”, “Anna”, “Bob”, “Jeniffer”, “Lucas”, “Amy”, “Jim”}Major - {“Math”, “Math”, “Genetics”, “Statistics”, “Accounting”, “Art”, “Music”, “Business”, “Finance”, “Finance”, “Math”}Grad_Year - {2023, 2025, 2025, 2024, 2026, 2024, 2025, 2025, 2023, 2026, 2024}GPA - {3.9, 3.75, 4.0, 4.0, 3.4, 3.9, 3.3, 3.8, 3.55, 4.0, 3.6} created df1, capitalize column names. Get 6-number summary GPA column. data type GRAD_YEAR column? ? Convert correct data type. Display frequency elements. Use simple ifelse statement add new column NEXT_YEAR df1. boolean column, indicating TRUE student graduating next year (2024) FALSE (Check GRAD_YEAR column see year student plans graduate). Extract/Select students df1 majoring Math going graduate year (2023). ","code":""},{"path":"problem-set-1.html","id":"problem-4","chapter":"Problem Set 1","heading":"Problem 4","text":" Create matrix 5 columns filled columns following elements: 10, 3, 6, 23, -5, -4, 13, 17, 5, 6, -7, -10, 13, 39, 20, 2, 1, 9, 11, -22, 23, -15, -3, 6, 12. Name matrix1. Use loop replace elements matrix1 follows: element negative value, replace 0, element greater equal 10, replace 10, element greater equal 0 less 10, replace 5. Create empty vector vector6. Use loop populate vector6 follows: populate vector6 odd numbers greater 0 less 30 skipping odd numbers divisible 3. ","code":""},{"path":"problem-set-1.html","id":"problem-5","chapter":"Problem Set 1","heading":"Problem 5","text":" Create function (name fun1) take numeric vector input extract elements input vector greater 10. two ways: using loop combined conditional statement, without (using logical extraction operators). Test function following vector: [1, 4, 45, 23, 7, 9, 12, 15, 33] Create function (name fun2) take two matrices inputs (mat1 mat2) produce another matrix elements populated follows: element mat1 greater corresponding element mat2, corresponding element output matrix \"Greater \"; element mat1 less corresponding element mat2, corresponding element output matrix \"Less \"; element mat1 equal corresponding element mat2, corresponding element output matrix \"Equal \".\nexample, mat1[1, 1] = 10 mat2[1, 1] = 5, output matrix \"Greater \" element [1, 1] position. Test function following matrices: [1, 4, 9, 5, 2, 7, 4, 3, 10], 3 rows filled row; [2, 3, 10, 9, 1, 4, 4, 3, 9], 3 rows filled row.Create function (name fun2) take two matrices inputs (mat1 mat2) produce another matrix elements populated follows: element mat1 greater corresponding element mat2, corresponding element output matrix \"Greater \"; element mat1 less corresponding element mat2, corresponding element output matrix \"Less \"; element mat1 equal corresponding element mat2, corresponding element output matrix \"Equal \".example, mat1[1, 1] = 10 mat2[1, 1] = 5, output matrix \"Greater \" element [1, 1] position. Test function following matrices: [1, 4, 9, 5, 2, 7, 4, 3, 10], 3 rows filled row; [2, 3, 10, 9, 1, 4, 4, 3, 9], 3 rows filled row.","code":""},{"path":"ps-1-solutions.html","id":"ps-1-solutions","chapter":"PS 1 Solutions","heading":"PS 1 Solutions","text":" ","code":""},{"path":"ps-1-solutions.html","id":"problem-1-1","chapter":"PS 1 Solutions","heading":"Problem 1","text":" Create vectors containing {3.1, 4.1, 5.1, 6.1, 7.1, 8.1} elements three different ways using following functions: c(), seq() argument, seq() length.argument. Name vector1, vector2, vector3, respectively. Add three new elements vector1: 10, 20, 30. 10 first element vector, 20 3rd element vector given 10 already added , 30 6th element vector given 10 20 already added vector. Create new vector containing {2, 3, 6, 10, 15, 18, 22, 25, 27, 30, 31, 35, 42} elements. Name vector4. Extract/Select elements greater 5 divisible 3 using logical statement create new vector vector5 elements. Check whether element 27 vector5 using logical operator. ","code":"\nvector1 <- c(3.1, 4.1, 5.1, 6.1, 7.1, 8.1)\n\nprint(vector1)\n#> [1] 3.1 4.1 5.1 6.1 7.1 8.1\n\nvector2 <- seq(3.1, 8.1, by=1)\n\nprint(vector2)\n#> [1] 3.1 4.1 5.1 6.1 7.1 8.1\n\nvector3 <- seq(3.1, 8.1, length.out=6)\n\nprint(vector3)\n#> [1] 3.1 4.1 5.1 6.1 7.1 8.1\nvector1 <- append(vector1, 10, after=0)\n\nvector1 <- append(vector1, 20, after=2)\n\nvector1 <- append(vector1, 30, after=5)\n\nprint(vector1)\n#> [1] 10.0  3.1 20.0  4.1  5.1 30.0  6.1  7.1  8.1\nvector4 <- c(2, 3, 6, 10, 15, 18, 22, 25, 27, 30, 31, 35, 42)\n\nvector5 <- vector4[vector4>5 & vector4%%3==0]\n\nprint(vector5)\n#> [1]  6 15 18 27 30 42\n\n27 %in% vector5\n#> [1] TRUE"},{"path":"ps-1-solutions.html","id":"problem-2-1","chapter":"PS 1 Solutions","heading":"Problem 2","text":" Create list following elements: [1, 50, 88], [“yesterday”, “today”, “tomorrow”], 22.5, [33.8, 42], “class_0001”. Name list1. Apply unlist() function list1. data type data structure output? think got specific data type?unlisted list1 vector contains elements “character” type. unlist function returns vector “character” type list consists data different types, c(1, 50, 88) c(\"yesterday\", \"today\", \"tomorrow\"). Create new list (name list2) removing third element first element list1. extract/select second third elements second element list2. Create new list following elements: 23, “new”, 45.7. Name list3. Now create new list (name list4) merging list2 list3 c(). many elements list4 contain (use built-function count). Extract first element list4 list vector. ","code":"\nlist1 <- list(c(1, 50, 88), c(\"yesterday\", \"today\", \"tomorrow\"), 22.5, c(33.8, 42), \"class_0001\")\n\nprint(list1)\n#> [[1]]\n#> [1]  1 50 88\n#> \n#> [[2]]\n#> [1] \"yesterday\" \"today\"     \"tomorrow\" \n#> \n#> [[3]]\n#> [1] 22.5\n#> \n#> [[4]]\n#> [1] 33.8 42.0\n#> \n#> [[5]]\n#> [1] \"class_0001\"\nunlist(list1)\n#>  [1] \"1\"          \"50\"         \"88\"         \"yesterday\" \n#>  [5] \"today\"      \"tomorrow\"   \"22.5\"       \"33.8\"      \n#>  [9] \"42\"         \"class_0001\"\n\nclass(unlist(list1))\n#> [1] \"character\"\n\nstr(unlist(list1))\n#>  chr [1:10] \"1\" \"50\" \"88\" \"yesterday\" \"today\" ...\nlist2 <- list1\n\nlist2[[1]] <- list2[[1]][-3]\n\nprint(list2)\n#> [[1]]\n#> [1]  1 50\n#> \n#> [[2]]\n#> [1] \"yesterday\" \"today\"     \"tomorrow\" \n#> \n#> [[3]]\n#> [1] 22.5\n#> \n#> [[4]]\n#> [1] 33.8 42.0\n#> \n#> [[5]]\n#> [1] \"class_0001\"\n\nlist2[[2]][c(2,3)]\n#> [1] \"today\"    \"tomorrow\"\nlist3 <- list(23, \"new\", 45.7)\n\nprint(list3)\n#> [[1]]\n#> [1] 23\n#> \n#> [[2]]\n#> [1] \"new\"\n#> \n#> [[3]]\n#> [1] 45.7\n\n# merge\n\nlist4 <- c(list2, list3)\n\nprint(list4)\n#> [[1]]\n#> [1]  1 50\n#> \n#> [[2]]\n#> [1] \"yesterday\" \"today\"     \"tomorrow\" \n#> \n#> [[3]]\n#> [1] 22.5\n#> \n#> [[4]]\n#> [1] 33.8 42.0\n#> \n#> [[5]]\n#> [1] \"class_0001\"\n#> \n#> [[6]]\n#> [1] 23\n#> \n#> [[7]]\n#> [1] \"new\"\n#> \n#> [[8]]\n#> [1] 45.7\n\nlength(list4)\n#> [1] 8\n\n# Extract as a list\n\nlist(list4[[1]])\n#> [[1]]\n#> [1]  1 50\n\n# Extract as a vector\n\nlist4[[1]]\n#> [1]  1 50"},{"path":"ps-1-solutions.html","id":"problem-3-1","chapter":"PS 1 Solutions","heading":"Problem 3","text":" Create data frame (name df1) following variables:\nName - {“James”, “Linda”, “Stacy”, “Mary”, “Tom”, “Anna”, “Bob”, “Jeniffer”, “Lucas”, “Amy”, “Jim”}\nMajor - {“Math”, “Math”, “Genetics”, “Statistics”, “Accounting”, “Art”, “Music”, “Business”, “Finance”, “Finance”, “Math”}\nGrad_Year - {2023, 2025, 2025, 2024, 2026, 2024, 2025, 2025, 2023, 2026, 2024}\nGPA - {3.9, 3.75, 4.0, 4.0, 3.4, 3.9, 3.3, 3.8, 3.55, 4.0, 3.6}\nCreate data frame (name df1) following variables:Name - {“James”, “Linda”, “Stacy”, “Mary”, “Tom”, “Anna”, “Bob”, “Jeniffer”, “Lucas”, “Amy”, “Jim”}Major - {“Math”, “Math”, “Genetics”, “Statistics”, “Accounting”, “Art”, “Music”, “Business”, “Finance”, “Finance”, “Math”}Grad_Year - {2023, 2025, 2025, 2024, 2026, 2024, 2025, 2025, 2023, 2026, 2024}GPA - {3.9, 3.75, 4.0, 4.0, 3.4, 3.9, 3.3, 3.8, 3.55, 4.0, 3.6} created df1, capitalize column names. Get 6-number summary GPA column. data type GRAD_YEAR column? Convert correct data structure. Display frequency elements.GRAD_YEAR column factor type, since represents meaningful year number, simply numbers. Use simple ifelse statement add new column NEXT_YEAR df1. boolean column, indicating TRUE student graduating next year (2024) FALSE (Check GRAD_YEAR column see year student plans graduate). Extract/Select students df1 majoring Math going graduate year (2023). ","code":"\nName <- c(\"James\", \"Linda\", \"Stacy\", \"Mary\", \"Tom\", \"Anna\", \"Bob\", \"Jeniffer\", \"Lucas\", \"Amy\", \"Jim\")\n\nMajor <- c(\"Math\", \"Math\", \"Genetics\", \"Statistics\", \"Accounting\", \"Art\", \"Music\", \"Business\", \"Finance\", \"Finance\", \"Math\")\n\nGrad_Year <- c(2023, 2025, 2025, 2024, 2026, 2024, 2025, 2025, 2023, 2026, 2024)\n\nGPA <- c(3.9, 3.75, 4.0, 4.0, 3.4, 3.9, 3.3, 3.8, 3.55, 4.0, 3.6)\n\ndf1 <- data.frame(Name, Major, Grad_Year, GPA)\n\nprint(df1)\n#>        Name      Major Grad_Year  GPA\n#> 1     James       Math      2023 3.90\n#> 2     Linda       Math      2025 3.75\n#> 3     Stacy   Genetics      2025 4.00\n#> 4      Mary Statistics      2024 4.00\n#> 5       Tom Accounting      2026 3.40\n#> 6      Anna        Art      2024 3.90\n#> 7       Bob      Music      2025 3.30\n#> 8  Jeniffer   Business      2025 3.80\n#> 9     Lucas    Finance      2023 3.55\n#> 10      Amy    Finance      2026 4.00\n#> 11      Jim       Math      2024 3.60\ncolnames(df1) <- c(\"NAME\", \"MAJOR\", \"GRAD_YEAR\", \"GPA\")\n\nsummary(df1$GPA)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   3.300   3.575   3.800   3.745   3.950   4.000\n\nclass(df1$GRAD_YEAR)\n#> [1] \"numeric\"\n\ndf1$GRAD_YEAR <- as.factor(df1$GRAD_YEAR)\n\nsummary(df1$GRAD_YEAR)\n#> 2023 2024 2025 2026 \n#>    2    3    4    2\ndf1$NEXT_YEAR <- ifelse(df1$GRAD_YEAR==2024, TRUE, FALSE)\n\nprint(df1)\n#>        NAME      MAJOR GRAD_YEAR  GPA NEXT_YEAR\n#> 1     James       Math      2023 3.90     FALSE\n#> 2     Linda       Math      2025 3.75     FALSE\n#> 3     Stacy   Genetics      2025 4.00     FALSE\n#> 4      Mary Statistics      2024 4.00      TRUE\n#> 5       Tom Accounting      2026 3.40     FALSE\n#> 6      Anna        Art      2024 3.90      TRUE\n#> 7       Bob      Music      2025 3.30     FALSE\n#> 8  Jeniffer   Business      2025 3.80     FALSE\n#> 9     Lucas    Finance      2023 3.55     FALSE\n#> 10      Amy    Finance      2026 4.00     FALSE\n#> 11      Jim       Math      2024 3.60      TRUE\ndf1[df1$MAJOR==\"Math\" & df1$GRAD_YEAR!=\"2023\", ]\n#>     NAME MAJOR GRAD_YEAR  GPA NEXT_YEAR\n#> 2  Linda  Math      2025 3.75     FALSE\n#> 11   Jim  Math      2024 3.60      TRUE"},{"path":"ps-1-solutions.html","id":"problem-4-1","chapter":"PS 1 Solutions","heading":"Problem 4","text":" Create matrix 5 columns filled columns following elements: 10, 3, 6, 23, -5, -4, 13, 17, 5, 6, -7, -10, 13, 39, 20, 2, 1, 9, 11, -22, 23, -15, -3, 6, 12. Name matrix1. Use loop replace elements matrix1 follows: element negative value, replace 0, element greater equal 10, replace 10, element greater equal 0 less 10, replace 5. Create empty vector vector6. Use loop populate vector6 follows: populate vector6 odd numbers greater 0 less 30 skipping odd numbers divisible 3. ","code":"\nmatrix1 <- matrix(c(10, 3, 6, 23, -5, -4, 13, 17, 5, 6, -7, -10, 13, 39, 20, 2, 1, 9, 11, -22, 23, -15, -3, 6, 12), ncol=5)\n\nprint(matrix1)\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]   10   -4   -7    2   23\n#> [2,]    3   13  -10    1  -15\n#> [3,]    6   17   13    9   -3\n#> [4,]   23    5   39   11    6\n#> [5,]   -5    6   20  -22   12\nfor (i in 1:dim(matrix1)[1]) {\n  \n  for (j in 1:dim(matrix1)[2]) {\n    \n    if (matrix1[i,j] < 0) {\n      \n      matrix1[i, j] = 0\n      \n    }\n    \n    else if (matrix1[i,j] >= 10) {\n      \n      matrix1[i,j] = 10\n      \n    }\n    \n    else {\n      \n      matrix1[i,j] = 5\n    }\n  }\n}\n\nprint(matrix1)\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]   10    0    0    5   10\n#> [2,]    5   10    0    5    0\n#> [3,]    5   10   10    5    0\n#> [4,]   10    5   10   10    5\n#> [5,]    0    5   10    0   10\nvector6 <- c()\n\ni <- 0\n\nwhile (i < 30) {\n  \n  i <- i + 1\n  \n  if (i%%2==0 || i%%3==0) {\n    \n    next\n    \n  }\n  \n  vector6 <- c(vector6, i)\n  \n}\n\nprint(vector6)\n#>  [1]  1  5  7 11 13 17 19 23 25 29"},{"path":"ps-1-solutions.html","id":"problem-5-1","chapter":"PS 1 Solutions","heading":"Problem 5","text":" Create function (name fun1) take numeric vector input extract elements input vector greater 10. two ways: using loop combined conditional statement, without (using logical extraction operators). Test function following vector: [1, 4, 45, 23, 7, 9, 12, 15, 33] Create function (name fun2) take two matrices inputs (mat1 mat2) produce another matrix elements populated follows: element mat1 greater corresponding element mat2, corresponding element output matrix \"Greater \"; element mat1 less corresponding element mat2, corresponding element output matrix \"Less \"; element mat1 equal corresponding element mat2, corresponding element output matrix \"Equal \".\nexample, mat1[1, 1] = 10 mat2[1, 1] = 5, output matrix \"Greater \" element [1, 1] position. Test function following matrices: [1, 4, 9, 5, 2, 7, 4, 3, 10], 3 rows filled row; [2, 3, 10, 9, 1, 4, 4, 3, 9], 3 rows filled row.Create function (name fun2) take two matrices inputs (mat1 mat2) produce another matrix elements populated follows: element mat1 greater corresponding element mat2, corresponding element output matrix \"Greater \"; element mat1 less corresponding element mat2, corresponding element output matrix \"Less \"; element mat1 equal corresponding element mat2, corresponding element output matrix \"Equal \".example, mat1[1, 1] = 10 mat2[1, 1] = 5, output matrix \"Greater \" element [1, 1] position. Test function following matrices: [1, 4, 9, 5, 2, 7, 4, 3, 10], 3 rows filled row; [2, 3, 10, 9, 1, 4, 4, 3, 9], 3 rows filled row.","code":"\nvector <- c(1, 4, 45, 23, 7, 9, 12, 15, 33)\n\nfun1 <- function(vec) {\n  \n  result <- c()\n  \n  for (i in 1:length(vec)) {\n    \n    if (vec[i] > 10) {\n      \n      result <- c(result, vec[i])\n      \n    }\n  }\n  \n  return(result)\n}\n\nfun1(vector)\n#> [1] 45 23 12 15 33\n\nfun1 <- function(vec) {\n  \n  return(vec[vec>10])\n  \n}\n\nfun1(vector)\n#> [1] 45 23 12 15 33\nmat1 <- matrix(c(1, 4, 9, 5, 2, 7, 4, 3, 10), nrow=3, byrow=TRUE)\n\nmat2 <- matrix(c(2, 3, 10, 9, 1, 4, 4, 3, 9), nrow=3, byrow=TRUE)\n\nfun2 <- function(mat1, mat2) {\n  \n  mat3 <- matrix(nrow=dim(mat1)[1], ncol=dim(mat1)[2])\n  \n  for (i in 1:dim(mat1)[1]) {\n    \n    for (j in 1:dim(mat1)[2]) {\n      \n      if (mat1[i,j]>mat2[i,j]) {\n        \n        mat3[i,j] <- \"Greater than\"\n        \n      }\n      \n      else if (mat1[i,j]<mat2[i,j]) {\n        \n        mat3[i,j] <- \"Less than\"\n      }\n      \n      else {\n        \n        mat3[i,j] <- \"Equal to\"\n      }\n    }\n  }\n  \n  return(mat3)\n}\n\nfun2(mat1, mat2)\n#>      [,1]        [,2]           [,3]          \n#> [1,] \"Less than\" \"Greater than\" \"Less than\"   \n#> [2,] \"Less than\" \"Greater than\" \"Greater than\"\n#> [3,] \"Equal to\"  \"Equal to\"     \"Greater than\""},{"path":"module-5.html","id":"module-5","chapter":"Module 5","heading":"Module 5","text":" ","code":""},{"path":"module-5.html","id":"functional-programming-importingexporting-data","chapter":"Module 5","heading":"Functional Programming & Importing/Exporting Data","text":"","code":""},{"path":"module-5.html","id":"importingexporting-data-intofrom-r","chapter":"Module 5","heading":"Importing/Exporting Data into/from R","text":"","code":""},{"path":"module-5.html","id":"importing-data-into-r","chapter":"Module 5","heading":"Importing Data into R","text":"Working small examples given previous modules good way learn basic functionalities R, point want stop learning start working data. module, learn import data (reading data) R save data (writing data) computer done .R, can read data files stored outside R environment. can also write data files stored accessed operating system. R can read write various file formats like csv, excel, txt etc. working mostly tabular data (data given rows columns). many function can use import data R, consider following two functions: read.table() read.csv().","code":""},{"path":"module-5.html","id":"read.table","chapter":"Module 5","heading":"read.table()","text":"One commonly used functions importing data R read.table() function (discuss alternatives later class). read.table() function flexible function shed load arguments, ’s quite simple use. read.table() function important arguments:file - name file, connectionheader - logical indicating file header line (used specify column names data frame)sep - string indicating columns separated (example, \"\", \",\", \"\\t\", \"/\")stringAsFactors - logical indicating whether character variables coded factors.Now let’s import data set lung_capacity.txt available Courseworks (download computer). order import data R, need following information: path file (location computer, note: code shows direct path windows system; slightly different Mac users), whether column names (data column names, pass TRUE header argument, header = TRUE), column separation method (columns data created separating white space, use sep = \"\"):Now data imported R available global environment. view , use View() function:data stored working directory, can simply pass name file without specifying exact path . see working directory located, use getwd() function:want change location working directory, passing path location setwd() function:Now working directory desktop. file stored desktop can imported R passing just name read.table() function:","code":"\n\ndata1 <- read.table(file = \"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp/lung_capacity.txt\", header = T, sep = \"\")\n\nView(data1)\n\ngetwd()\n#> [1] \"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp\"\n\nsetwd(\"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp\")\n\ndata1 <- read.table(file = \"lung_capacity.txt\", header = T, sep = \"\")"},{"path":"module-5.html","id":"read.csv","chapter":"Module 5","heading":"read.csv()","text":"file trying import R can comma-delimited (columns separated comma). Normally, files .csv file extensions. common file extension statisticians use frequently, R separate function allows import files. function called read.csv():can see, longer required specify sep argument R already knows comma-delimited file. Thus, two ways importing .csv files R: 1) using read.table() function sep = \",\" 2) using read.csv() function directly.method choose.","code":"\n\ndata2 <- read.csv(file = \"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp/lung_capacity_2.csv\", header = T)"},{"path":"module-5.html","id":"exporting-data-from-r","chapter":"Module 5","heading":"Exporting Data from R","text":"","code":""},{"path":"module-5.html","id":"write.table","chapter":"Module 5","heading":"write.table()","text":"manipulating data R (example, adding removing columns/row, modifying existing columns, ), might want save modified data computer. can using write.table() function, following arguments:x - name object trying savefile - name extension file data stored computercol.names - logical indicating file contain column names (almost always want assign TRUE argument)row.names - logical indicating file contain row index (almost always want assign FALSE argument)sep - string indicating columns separated (example, \"\", \",\", \"\\t\", \"/\")instance, let’s save data2 data set computer new_data name:","code":"\n\nwrite.table(data2, file = \"new_data.csv\", col.names = TRUE, row.names = FALSE, sep = \",\")"},{"path":"module-5.html","id":"write.csv","chapter":"Module 5","heading":"write.csv()","text":"Like read.csv() function, can use write.csv() function save data csv extension (comma-delimited file):Now, don’t need specify sep argument R already knows type file create. ","code":"\n\nwrite.csv(data2, file = \"new_data_2.csv\", row.names = FALSE)"},{"path":"module-5.html","id":"basic-statistics-built-in-functions","chapter":"Module 5","heading":"Basic Statistics Built-in Functions","text":"R built-functions large number summary statistics. module, consider summary statistics numerical/quantitative variables. Let’s use Age variable data1 data set ’ve already imported R.","code":""},{"path":"module-5.html","id":"summary","chapter":"Module 5","heading":"Summary","text":"summary() function provides basic summary statistics numerical data:","code":"\n\nsummary(data1$Age)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>    3.00    9.00   13.00   12.33   15.00   19.00"},{"path":"module-5.html","id":"central-tendency","chapter":"Module 5","heading":"Central Tendency","text":"","code":""},{"path":"module-5.html","id":"mean","chapter":"Module 5","heading":"Mean","text":"name suggests, mean() function computes mean value numeric variable:Type ?mean() console see arguments mean() function .","code":"\n\nmean(data1$Age)\n#> [1] 12.3269"},{"path":"module-5.html","id":"median","chapter":"Module 5","heading":"Median","text":"median() function computes median numerical variable:","code":"\n\nmedian(data1$Age)\n#> [1] 13"},{"path":"module-5.html","id":"spread","chapter":"Module 5","heading":"Spread","text":"","code":""},{"path":"module-5.html","id":"variance","chapter":"Module 5","heading":"Variance","text":"var() function computes variance numerical variable:","code":"\n\nvar(data1$Age)\n#> [1] 16.03802"},{"path":"module-5.html","id":"standard-deviation","chapter":"Module 5","heading":"Standard Deviation","text":"sd() function computes standard deviation numerical variable:Another way computing standard deviation taking square root variance:","code":"\n\nsd(data1$Age)\n#> [1] 4.00475\n\nsqrt(var(data1$Age))\n#> [1] 4.00475"},{"path":"module-5.html","id":"quantiles","chapter":"Module 5","heading":"Quantiles","text":"can use quantile() function calculate quantiles (.k.quartiles, .k.percentiles) numerical variable. default, gives basic quantiles:can make quantile() function compute specific quantiles. examples, let’s compute 0.30 0.80 quantiles (, 30-th 80-th percentiles):","code":"\n\nquantile(data1$Age)\n#>   0%  25%  50%  75% 100% \n#>    3    9   13   15   19\n\nquantile(data1$Age, c(0.3, 0.8))\n#> 30% 80% \n#>  10  16"},{"path":"module-5.html","id":"inverse-quantiles","chapter":"Module 5","heading":"Inverse Quantiles","text":"Suppose given observation x data, want know corresponding quantile. , want know fraction data less x. example, let’s find corresponding quantile 11 Age variable:expression data1$Age < 11 compares every element Age variable 11 returns vector logical values, n-th logical value TRUE data1$Age[n] < 11. mean function converts logical values 0 1: 0 FALSE 1 TRUE. average 1s 0s fraction Age variable less 11, inverse quantile 11.","code":"\n\nmean(data1$Age < 11)\n#> [1] 0.3213793"},{"path":"module-5.html","id":"iqr-inter-quartile-range","chapter":"Module 5","heading":"IQR (Inter-Quartile Range)","text":"IQR difference Q3 (third quartile, 75-th percentile) Q1 (first quartile, 25-th percentile):Another way computing IQR using quantile() functions:","code":"\n\nIQR(data1$Age)\n#> [1] 6\n\nquantile(data1$Age, 0.75) - quantile(data1$Age, 0.25)\n#> 75% \n#>   6"},{"path":"module-5.html","id":"minimum","chapter":"Module 5","heading":"Minimum","text":"min() function calculates minimum value numerical variable:","code":"\n\nmin(data1$Age)\n#> [1] 3"},{"path":"module-5.html","id":"which.min","chapter":"Module 5","heading":"which.min()","text":"can use .min() function find index position minimum value variable:","code":"\n\nwhich.min(data1$Age)\n#> [1] 114"},{"path":"module-5.html","id":"maximum","chapter":"Module 5","heading":"Maximum","text":"max() function calculates maximum value numerical variable:","code":"\n\nmax(data1$Age)\n#> [1] 19"},{"path":"module-5.html","id":"which.max","chapter":"Module 5","heading":"which.max()","text":"can use .max() function find index position maximum value variable:","code":"\n\nwhich.max(data1$Age)\n#> [1] 11"},{"path":"module-5.html","id":"range","chapter":"Module 5","heading":"Range","text":"Another way calculating maximum minimum numerical variable using range() function.definition, range difference maximum minimum values numerical variable. compute quantity, can utilize max() min() functions:","code":"\n\nrange(data1$Age)\n#> [1]  3 19\n\nmax(data1$Age) - min(data1$Age)\n#> [1] 16"},{"path":"module-5.html","id":"summation","chapter":"Module 5","heading":"Summation","text":"sum() function adds elements numerical variable:Let’s use sum() length() functions compute mean value:","code":"\n\nsum(data1$Age)\n#> [1] 8937\n\nsum(data1$Age)/length(data1$Age)\n#> [1] 12.3269"},{"path":"module-5.html","id":"cumulative-summation","chapter":"Module 5","heading":"Cumulative Summation","text":"cumsum() function produces vector containing cumulative sum input vector (, adds values sequentially displaying results addition). simplicity, let’s use following vector:cumulative summation vector x : ","code":"\n\nx <- c(2, 4, 3, 5, 10)\n\nprint(x)\n#> [1]  2  4  3  5 10\n\ncumsum(x)\n#> [1]  2  6  9 14 24"},{"path":"module-5.html","id":"functional-programming-apply-family-of-functions","chapter":"Module 5","heading":"Functional Programming: apply() Family of Functions","text":"Writing loops useful programming particularly easy working interactively command line. Multi-line expressions curly braces just easy sort working command line.Moreover, loops bad reputation R many people believe slow, real downside loops ’re flexible: loop conveys ’re iterating, done results.Fortunately, R built-functions overcome aforementioned challenges. implement looping compact form make life easier. module, consider several functions can combined family function called apply() family function.apply() functions use functional programming, implies using functions arguments functions (yeah, many functions). Let’s start basic ones:","code":""},{"path":"module-5.html","id":"apply-function","chapter":"Module 5","heading":"apply() Function","text":"apply() function enables applying function rows columns matrix data frame. Depending function specify using apply function, get back either vector matrix. general structure apply() function follows:X - object pass function (either matrix data frame)MARGIN - argument uses values 1 2, 1 rows 2 columns.FUN - function command want apply either rows columns... - can add additional instructions appropriate command/function applyingFor example, let’s create matrix 5x4 dimensions:Now, suppose want calculate mean value column matrix. can using apply() function:can thing row-wise:can even pass user-defined function. example, first let’s create function calculates range:Now, let’s apply function columns matrix1:","code":"\n\napply(X, MARGIN, FUN, ...)\n\nmatrix1 <- matrix(1:20, nrow = 5, byrow = T)\n\nprint(matrix1)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3    4\n#> [2,]    5    6    7    8\n#> [3,]    9   10   11   12\n#> [4,]   13   14   15   16\n#> [5,]   17   18   19   20\n\napply(matrix1, 2, mean)\n#> [1]  9 10 11 12\n\napply(matrix1, 1, mean)\n#> [1]  2.5  6.5 10.5 14.5 18.5\n\nfunction_1 <- function(x){\n  \n  range <- max(x) - min(x)\n  \n  return(range)\n}\n\napply(matrix1, 2, function_1)\n#> [1] 16 16 16 16"},{"path":"module-5.html","id":"lapply-function","chapter":"Module 5","heading":"lapply() Function","text":"use apply() function lists, throw error. Suppose list:now want calculate length element list1. use apply() function, cause error:Instead use lapply() function:","code":"\n\nlist1 <- list(c(1, 4, 10), 24, 1:5)\n\nprint(list1)\n#> [[1]]\n#> [1]  1  4 10\n#> \n#> [[2]]\n#> [1] 24\n#> \n#> [[3]]\n#> [1] 1 2 3 4 5\n\napply(list1, 2, length)\n#> Error in apply(list1, 2, length): dim(X) must have a positive length\n\nlapply(list1, length)\n#> [[1]]\n#> [1] 3\n#> \n#> [[2]]\n#> [1] 1\n#> \n#> [[3]]\n#> [1] 5"},{"path":"module-5.html","id":"sapply-function","chapter":"Module 5","heading":"sapply() Function","text":"noticed, previous command returned list. want output vector, use sapply() function:","code":"\n\nsapply(list1, length)\n#> [1] 3 1 5"},{"path":"module-5.html","id":"mapply-function","chapter":"Module 5","heading":"mapply() Function","text":"mapply() function multivariate apply() function applies function parallel set arguments. used iterate multiple R objects parallel. mapply() function different argument order lapply() function apply comes first rather object iterate . example, want create following list:Instead, can use mapply() function follows: ’ve learned utilize apply family functions implements looping matrix, data frame, list compact form. want apply function subsets vector? want split vector subsets, compute summary statistics subset return result group form?’s trying , find tapply() aggregate() functions useful. come handy start analyzing data. Now, let’s see functions work. using data set (Lung Capacity data set).","code":"\n\nlist(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))\n#> [[1]]\n#> [1] 1 1 1 1\n#> \n#> [[2]]\n#> [1] 2 2 2\n#> \n#> [[3]]\n#> [1] 3 3\n#> \n#> [[4]]\n#> [1] 4\n\nmapply(rep, 1:4, 4:1)\n#> [[1]]\n#> [1] 1 1 1 1\n#> \n#> [[2]]\n#> [1] 2 2 2\n#> \n#> [[3]]\n#> [1] 3 3\n#> \n#> [[4]]\n#> [1] 4"},{"path":"module-5.html","id":"tapply-function","chapter":"Module 5","heading":"tapply() Function","text":"tapply() function another member apply family functions. tapply() used apply function subsets vector. allows create group summaries based factor levels another variables. arguments tapply() function follows:X - input vectorINDEX - factor variable (list factor variables)FUN - function applied... - argumentsNow, suppose want calculate mean value Age male female patients separately. can passing Age Sex variables along mean function tappy():can pass user-defined function well. First, let’s create function_1 returns mean median values vector:Now, let’s pass tapply() function:can even complex scenarios two factor variables. case, factor variables put list:","code":"\n\ntapply(X, INDEX, FUN, ...)\n\ntapply(data1$Age, data1$Sex, mean)\n#>   FEMALE     MALE \n#> 12.44972 12.20708\n\nfunction_1 <- function(x){\n  \n  return(c(Mean = mean(x), Median = median(x)))\n  \n}\n\ntapply(data1$Age, data1$Sex, function_1)\n#> $FEMALE\n#>     Mean   Median \n#> 12.44972 13.00000 \n#> \n#> $MALE\n#>     Mean   Median \n#> 12.20708 12.00000\n\ntapply(data1$Age, list(data1$Sex, data1$Smoke), mean)\n#>              NO      YES\n#> FEMALE 12.12739 14.75000\n#> MALE   11.94910 14.81818\n\ntapply(data1$Age, list(data1$Sex, data1$Smoke, data1$Status), mean)\n#> , , HEALTHY\n#> \n#>              NO      YES\n#> FEMALE 11.89326 15.00000\n#> MALE   12.13408 14.69231\n#> \n#> , , STAGE_1\n#> \n#>              NO      YES\n#> FEMALE 12.23529 13.87500\n#> MALE   11.69231 15.33333\n#> \n#> , , STAGE_2\n#> \n#>              NO YES\n#> FEMALE 12.54545  14\n#> MALE   11.72093  NA\n#> \n#> , , STAGE_3\n#> \n#>              NO      YES\n#> FEMALE 13.16667 15.33333\n#> MALE   11.95238 15.00000"},{"path":"module-5.html","id":"aggregate-function","chapter":"Module 5","heading":"aggregate() Function","text":"Another way splitting vectors subsets computing summary statistics subset using aggregate() function. useful performing aggregate operations like sum, count, mean, median, . arguments aggregate() function follows:X - input objectby - list grouping elements, subsets grouped byFUN - function applied... - argumentsHere examples:","code":"\n\naggregate(X, by, FUN, ...)\n\naggregate(data1$LungCap, list(data1$Smoke), median)\n#>   Group.1    x\n#> 1      NO 7.90\n#> 2     YES 8.65\n\naggregate(data1$LungCap, list(data1$Smoke, data1$Sex), median)\n#>   Group.1 Group.2      x\n#> 1      NO  FEMALE 7.6000\n#> 2     YES  FEMALE 8.1625\n#> 3      NO    MALE 8.2125\n#> 4     YES    MALE 9.3500\n\naggregate(data1$LungCap, list(data1$Smoke, data1$Sex, data1$Status), median)\n#>    Group.1 Group.2 Group.3       x\n#> 1       NO  FEMALE HEALTHY  7.4375\n#> 2      YES  FEMALE HEALTHY  8.2375\n#> 3       NO    MALE HEALTHY  8.2000\n#> 4      YES    MALE HEALTHY  9.0750\n#> 5       NO  FEMALE STAGE_1  7.7500\n#> 6      YES  FEMALE STAGE_1  7.8375\n#> 7       NO    MALE STAGE_1  8.0750\n#> 8      YES    MALE STAGE_1 10.1000\n#> 9       NO  FEMALE STAGE_2  8.2750\n#> 10     YES  FEMALE STAGE_2  7.9500\n#> 11      NO    MALE STAGE_2  8.3500\n#> 12      NO  FEMALE STAGE_3  7.7250\n#> 13     YES  FEMALE STAGE_3  8.1250\n#> 14      NO    MALE STAGE_3  7.8250\n#> 15     YES    MALE STAGE_3  9.8750\n\naggregate(data1$LungCap, list(data1$Smoke, data1$Sex, data1$Status), function_1)\n#>    Group.1 Group.2 Group.3    x.Mean  x.Median\n#> 1       NO  FEMALE HEALTHY  7.212258  7.437500\n#> 2      YES  FEMALE HEALTHY  8.341667  8.237500\n#> 3       NO    MALE HEALTHY  8.385335  8.200000\n#> 4      YES    MALE HEALTHY  9.144231  9.075000\n#> 5       NO  FEMALE STAGE_1  7.208529  7.750000\n#> 6      YES  FEMALE STAGE_1  7.575000  7.837500\n#> 7       NO    MALE STAGE_1  8.153297  8.075000\n#> 8      YES    MALE STAGE_1  9.875000 10.100000\n#> 9       NO  FEMALE STAGE_2  7.681061  8.275000\n#> 10     YES  FEMALE STAGE_2  7.716667  7.950000\n#> 11      NO    MALE STAGE_2  7.811047  8.350000\n#> 12      NO  FEMALE STAGE_3  7.913889  7.725000\n#> 13     YES  FEMALE STAGE_3  8.275000  8.125000\n#> 14      NO    MALE STAGE_3  7.802381  7.825000\n#> 15     YES    MALE STAGE_3  9.875000  9.875000\n\naggregate(data1[ ,c(\"Age\", \"LungCap\")], list(data1$Smoke), median)\n#>   Group.1 Age LungCap\n#> 1      NO  12    7.90\n#> 2     YES  15    8.65"},{"path":"module-6.html","id":"module-6","chapter":"Module 6","heading":"Module 6","text":" ","code":""},{"path":"module-6.html","id":"tidyverse-family-of-packages","chapter":"Module 6","heading":"Tidyverse Family of Packages","text":"data frame key data structure statistics R. basic structure data frame one observation per row column represents variable, measure, feature, characteristic observation. can conduct analyses draw conclusions, often need reorganize data. Tidyverse collection R packages (developed RStudio’s chief scientist Hadley Wickham) provides efficient, fast, well-documented workflow general data modeling, wrangling, visualization tasks.Tidyverse introduces set useful data analysis packages help streamline work R. particular, Tidyverse designed address top three common issues arise dealing data analysis base R: (1) Results obtained base R function often depend type data used; (2) R expressions used non-standard way, can confuse beginners; (3) Hidden arguments often various default operations beginners unaware .core Tidyverse includes packages ’re likely use everyday data analyses.ggplot2 - ggplot2 system declaratively creating graphics, based Grammar Graphics. provide data, tell ggplot2 map variables aesthetics, graphical primitives use, takes care details.ggplot2 - ggplot2 system declaratively creating graphics, based Grammar Graphics. provide data, tell ggplot2 map variables aesthetics, graphical primitives use, takes care details.dplyr - dplyr provides grammar data manipulation, providing consistent set verbs solve common data manipulation challenges.dplyr - dplyr provides grammar data manipulation, providing consistent set verbs solve common data manipulation challenges.tidyr - tidyr provides set functions help get tidy data. Tidy data data consistent form: brief, every variable goes column, every column variable.tidyr - tidyr provides set functions help get tidy data. Tidy data data consistent form: brief, every variable goes column, every column variable.readr - readr provides fast friendly way read rectangular data (like csv, tsv, fwf). designed flexibly parse many types data found wild, still cleanly failing data unexpectedly changes.readr - readr provides fast friendly way read rectangular data (like csv, tsv, fwf). designed flexibly parse many types data found wild, still cleanly failing data unexpectedly changes.purrr - purrr enhances R’s functional programming (FP) toolkit providing complete consistent set tools working functions vectors. master basic concepts, purrr allows replace many loops code easier write expressive.purrr - purrr enhances R’s functional programming (FP) toolkit providing complete consistent set tools working functions vectors. master basic concepts, purrr allows replace many loops code easier write expressive.tibble - tibble modern re-imagining data frame, keeping time proven effective, throwing . Tibbles data.frames lazy surly: less complain forcing confront problems earlier, typically leading cleaner, expressive code.tibble - tibble modern re-imagining data frame, keeping time proven effective, throwing . Tibbles data.frames lazy surly: less complain forcing confront problems earlier, typically leading cleaner, expressive code.stringr - stringr provides cohesive set functions designed make working strings easy possible. built top stringi, uses ICU C library provide fast, correct implementations common string manipulations.stringr - stringr provides cohesive set functions designed make working strings easy possible. built top stringi, uses ICU C library provide fast, correct implementations common string manipulations.forcats - forcats provides suite useful tools solve common problems factors. R uses factors handle categorical variables, variables fixed known set possible values.forcats - forcats provides suite useful tools solve common problems factors. R uses factors handle categorical variables, variables fixed known set possible values.Tidyverse also includes many packages specialized usage. loaded automatically Tidyverse, ’ll need load one call.install Tidyverse packages run following code console:Now Tidyverse available R, activated yet. Whenever start new R session plan use Tidyverse packages, need activate package calling library(tidyverse) function console:start learning Tidyverse family packages introducing dplyr package.working nyc_flights data set provides information flights departed New York City 2013 (data set available Courseworks). contains 336 776 observations (rows) 19 variables (columns). Let’s import data set R:Let’s convert data frame tibble data frame (don’t worry function; use module just better representation results): ","code":"\n\ninstall.packages(\"tidyverse\")\n\nlibrary(tidyverse)\n#> ── Attaching core tidyverse packages ──── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n#> ✔ purrr     1.0.4     \n#> ── Conflicts ────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nflights <- read.csv(file = \"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp/nyc_flights.csv\", header = T)\n\nflights <- as_tibble(flights)"},{"path":"module-6.html","id":"dplyr-package","chapter":"Module 6","heading":"dplyr Package","text":"mentioned earlier, dplyr provides grammar data manipulation, providing consistent set verbs solve common data manipulation challenges selecting important variables, filtering key observations, creating new variables, computing summaries, .module going learn key dplyr functions allow solve vast majority data manipulation challenges. functions discuss common characteristics. particular,first argument data frameThe first argument data frameThe subsequent arguments describe data frame specified first argument, can refer columns data frame directly without using $ operator (just use column names)subsequent arguments describe data frame specified first argument, can refer columns data frame directly without using $ operator (just use column names)return result function new data frameThe return result function new data framedplyr aims provide function basic verb data manipulation. verbs can organised three categories based component data set work :Rows:\nfilter() - chooses rows based column values\nslice() - chooses rows based location\narrange() - changes order rows\nRows:filter() - chooses rows based column valuesslice() - chooses rows based locationarrange() - changes order rowsColumns:\nselect() - changes whether column included\nrename() - changes name columns\nmutate() - changes values columns creates new columns\nrelocate() - changes order columns\nColumns:select() - changes whether column includedrename() - changes name columnsmutate() - changes values columns creates new columnsrelocate() - changes order columnsGroups rows:\ngroup_by() - changes scope function operating entire data set operating group--group\nsummarize() - collapses group single row\nGroups rows:group_by() - changes scope function operating entire data set operating group--groupsummarize() - collapses group single row","code":""},{"path":"module-6.html","id":"filter-function","chapter":"Module 6","heading":"filter() Function","text":"filter() allows subset observations based values. first argument name data frame, second subsequent arguments expressions filter data frame. instance, let’s select flights January 1st:run line code, dplyr executes filtering operation returns new data frame. dplyr functions never modify inputs, want save result, ’ll need use assignment operator, <- :Let’s find flights departed November December:operation using %% operator:","code":"\n\nfilter(flights, month == 1, day == 1)\n#> # A tibble: 842 × 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> # ℹ 832 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\njan1 <- filter(flights, month == 1, day == 1)\n\nfilter(flights, month == 11 | month == 12)\n#> # A tibble: 55,403 × 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013    11     1        5           2359         6\n#>  2  2013    11     1       35           2250       105\n#>  3  2013    11     1      455            500        -5\n#>  4  2013    11     1      539            545        -6\n#>  5  2013    11     1      542            545        -3\n#>  6  2013    11     1      549            600       -11\n#>  7  2013    11     1      550            600       -10\n#>  8  2013    11     1      554            600        -6\n#>  9  2013    11     1      554            600        -6\n#> 10  2013    11     1      554            600        -6\n#> # ℹ 55,393 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nfilter(flights, month %in% c(11, 12))\n#> # A tibble: 55,403 × 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013    11     1        5           2359         6\n#>  2  2013    11     1       35           2250       105\n#>  3  2013    11     1      455            500        -5\n#>  4  2013    11     1      539            545        -6\n#>  5  2013    11     1      542            545        -3\n#>  6  2013    11     1      549            600       -11\n#>  7  2013    11     1      550            600       -10\n#>  8  2013    11     1      554            600        -6\n#>  9  2013    11     1      554            600        -6\n#> 10  2013    11     1      554            600        -6\n#> # ℹ 55,393 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>"},{"path":"module-6.html","id":"slice-function","chapter":"Module 6","heading":"slice() Function","text":"slice() function allows index rows (integer) locations. can select, remove, duplicate rows.instance, let’s get observations rows 5 10:Let’s select rows except first four (option can used drop observations data set):Similar head() tail() functions, slice_head() slice_tail() can used display top bottom rows data set, respectively. Let’s print first last 3 rows flights data set:Use slice_sample() function randomly select rows. Use option prop choose certain proportion cases:Use replace = TRUE take sample replacement.","code":"\n\nslice(flights, 5:10)\n#> # A tibble: 6 × 19\n#>    year month   day dep_time sched_dep_time dep_delay\n#>   <int> <int> <int>    <int>          <int>     <int>\n#> 1  2013     1     1      554            600        -6\n#> 2  2013     1     1      554            558        -4\n#> 3  2013     1     1      555            600        -5\n#> 4  2013     1     1      557            600        -3\n#> 5  2013     1     1      557            600        -3\n#> 6  2013     1     1      558            600        -2\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nslice(flights, -(1:4))\n#> # A tibble: 336,772 × 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     1     1      554            600        -6\n#>  2  2013     1     1      554            558        -4\n#>  3  2013     1     1      555            600        -5\n#>  4  2013     1     1      557            600        -3\n#>  5  2013     1     1      557            600        -3\n#>  6  2013     1     1      558            600        -2\n#>  7  2013     1     1      558            600        -2\n#>  8  2013     1     1      558            600        -2\n#>  9  2013     1     1      558            600        -2\n#> 10  2013     1     1      558            600        -2\n#> # ℹ 336,762 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nslice_head(flights, n = 3)\n#> # A tibble: 3 × 19\n#>    year month   day dep_time sched_dep_time dep_delay\n#>   <int> <int> <int>    <int>          <int>     <int>\n#> 1  2013     1     1      517            515         2\n#> 2  2013     1     1      533            529         4\n#> 3  2013     1     1      542            540         2\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nslice_tail(flights, n = 3)\n#> # A tibble: 3 × 19\n#>    year month   day dep_time sched_dep_time dep_delay\n#>   <int> <int> <int>    <int>          <int>     <int>\n#> 1  2013     9    30       NA           1210        NA\n#> 2  2013     9    30       NA           1159        NA\n#> 3  2013     9    30       NA            840        NA\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nslice_sample(flights, n = 10)\n#> # A tibble: 10 × 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     9    27     1257           1300        -3\n#>  2  2013     2    23     1259           1300        -1\n#>  3  2013     8    29     1848           1850        -2\n#>  4  2013     8    15     1010           1014        -4\n#>  5  2013     1     7     1908           1910        -2\n#>  6  2013    10    16     1757           1717        40\n#>  7  2013    11    13      814            815        -1\n#>  8  2013     2     8     1400           1350        10\n#>  9  2013     1     2     1633           1640        -7\n#> 10  2013     9    29     2010           2015        -5\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nslice_sample(flights, prop = 0.001)\n#> # A tibble: 336 × 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     8     2     1343           1205        98\n#>  2  2013     4    30     1045           1010        35\n#>  3  2013     7    12     1912           1725       107\n#>  4  2013     9    22     1437           1439        -2\n#>  5  2013     6    26     2323           2051       152\n#>  6  2013     4     9     2050           2029        21\n#>  7  2013    10    29     2117           2129       -12\n#>  8  2013     2    14      559            600        -1\n#>  9  2013     2    13     1810           1815        -5\n#> 10  2013     8    30      750            800       -10\n#> # ℹ 326 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>"},{"path":"module-6.html","id":"arrange-function","chapter":"Module 6","heading":"arrange() Function","text":"arrange() function used change order rows data set. takes data frame set column names (complicated expressions) order . provide one column name, additional column used break ties values preceding columns:Use desc() re-order column descending order:","code":"\n\narrange(flights, year, month, day)\n#> # A tibble: 336,776 × 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> # ℹ 336,766 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\narrange(flights, desc(dep_delay))\n#> # A tibble: 336,776 × 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     1     9      641            900      1301\n#>  2  2013     6    15     1432           1935      1137\n#>  3  2013     1    10     1121           1635      1126\n#>  4  2013     9    20     1139           1845      1014\n#>  5  2013     7    22      845           1600      1005\n#>  6  2013     4    10     1100           1900       960\n#>  7  2013     3    17     2321            810       911\n#>  8  2013     6    27      959           1900       899\n#>  9  2013     7    22     2257            759       898\n#> 10  2013    12     5      756           1700       896\n#> # ℹ 336,766 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>"},{"path":"module-6.html","id":"select-function","chapter":"Module 6","heading":"select() Function","text":"Often work large data sets many columns actually interest . select() function allows rapidly zoom useful subset. can select columns name:can select columns two variables (inclusive):can select columns except :can operation ! operator:can use column indexes column selection:number helper functions can use within select(). example, starts_with(), ends_with(), matches() contains(). let quickly match larger blocks variables meet criterion.Let’s select columns start “sched”:can select columns data set end “time”:suppose want select columns data set contain “ar”:can even combine arguments:","code":"\n\nselect(flights, year, month, day)\n#> # A tibble: 336,776 × 3\n#>     year month   day\n#>    <int> <int> <int>\n#>  1  2013     1     1\n#>  2  2013     1     1\n#>  3  2013     1     1\n#>  4  2013     1     1\n#>  5  2013     1     1\n#>  6  2013     1     1\n#>  7  2013     1     1\n#>  8  2013     1     1\n#>  9  2013     1     1\n#> 10  2013     1     1\n#> # ℹ 336,766 more rows\n\nselect(flights, year:day)\n#> # A tibble: 336,776 × 3\n#>     year month   day\n#>    <int> <int> <int>\n#>  1  2013     1     1\n#>  2  2013     1     1\n#>  3  2013     1     1\n#>  4  2013     1     1\n#>  5  2013     1     1\n#>  6  2013     1     1\n#>  7  2013     1     1\n#>  8  2013     1     1\n#>  9  2013     1     1\n#> 10  2013     1     1\n#> # ℹ 336,766 more rows\n\nselect(flights, -(year:day))\n#> # A tibble: 336,776 × 16\n#>    dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>       <int>          <int>     <int>    <int>          <int>\n#>  1      517            515         2      830            819\n#>  2      533            529         4      850            830\n#>  3      542            540         2      923            850\n#>  4      544            545        -1     1004           1022\n#>  5      554            600        -6      812            837\n#>  6      554            558        -4      740            728\n#>  7      555            600        -5      913            854\n#>  8      557            600        -3      709            723\n#>  9      557            600        -3      838            846\n#> 10      558            600        -2      753            745\n#> # ℹ 336,766 more rows\n#> # ℹ 11 more variables: arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nselect(flights, !(year:day))\n#> # A tibble: 336,776 × 16\n#>    dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>       <int>          <int>     <int>    <int>          <int>\n#>  1      517            515         2      830            819\n#>  2      533            529         4      850            830\n#>  3      542            540         2      923            850\n#>  4      544            545        -1     1004           1022\n#>  5      554            600        -6      812            837\n#>  6      554            558        -4      740            728\n#>  7      555            600        -5      913            854\n#>  8      557            600        -3      709            723\n#>  9      557            600        -3      838            846\n#> 10      558            600        -2      753            745\n#> # ℹ 336,766 more rows\n#> # ℹ 11 more variables: arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nselect(flights, c(1, 5, 8))\n#> # A tibble: 336,776 × 3\n#>     year sched_dep_time sched_arr_time\n#>    <int>          <int>          <int>\n#>  1  2013            515            819\n#>  2  2013            529            830\n#>  3  2013            540            850\n#>  4  2013            545           1022\n#>  5  2013            600            837\n#>  6  2013            558            728\n#>  7  2013            600            854\n#>  8  2013            600            723\n#>  9  2013            600            846\n#> 10  2013            600            745\n#> # ℹ 336,766 more rows\n\nselect(flights, starts_with(\"sched\"))\n#> # A tibble: 336,776 × 2\n#>    sched_dep_time sched_arr_time\n#>             <int>          <int>\n#>  1            515            819\n#>  2            529            830\n#>  3            540            850\n#>  4            545           1022\n#>  5            600            837\n#>  6            558            728\n#>  7            600            854\n#>  8            600            723\n#>  9            600            846\n#> 10            600            745\n#> # ℹ 336,766 more rows\n\nselect(flights, ends_with(\"time\"))\n#> # A tibble: 336,776 × 5\n#>    dep_time sched_dep_time arr_time sched_arr_time air_time\n#>       <int>          <int>    <int>          <int>    <int>\n#>  1      517            515      830            819      227\n#>  2      533            529      850            830      227\n#>  3      542            540      923            850      160\n#>  4      544            545     1004           1022      183\n#>  5      554            600      812            837      116\n#>  6      554            558      740            728      150\n#>  7      555            600      913            854      158\n#>  8      557            600      709            723       53\n#>  9      557            600      838            846      140\n#> 10      558            600      753            745      138\n#> # ℹ 336,766 more rows\n\nselect(flights, contains(\"ar\"))\n#> # A tibble: 336,776 × 5\n#>     year arr_time sched_arr_time arr_delay carrier\n#>    <int>    <int>          <int>     <int> <chr>  \n#>  1  2013      830            819        11 UA     \n#>  2  2013      850            830        20 UA     \n#>  3  2013      923            850        33 AA     \n#>  4  2013     1004           1022       -18 B6     \n#>  5  2013      812            837       -25 DL     \n#>  6  2013      740            728        12 UA     \n#>  7  2013      913            854        19 B6     \n#>  8  2013      709            723       -14 EV     \n#>  9  2013      838            846        -8 B6     \n#> 10  2013      753            745         8 AA     \n#> # ℹ 336,766 more rows\n\nselect(flights, starts_with(\"sched\") & ends_with(\"time\"))\n#> # A tibble: 336,776 × 2\n#>    sched_dep_time sched_arr_time\n#>             <int>          <int>\n#>  1            515            819\n#>  2            529            830\n#>  3            540            850\n#>  4            545           1022\n#>  5            600            837\n#>  6            558            728\n#>  7            600            854\n#>  8            600            723\n#>  9            600            846\n#> 10            600            745\n#> # ℹ 336,766 more rows"},{"path":"module-6.html","id":"rename-function","chapter":"Module 6","heading":"rename() Function","text":"Use rename() function rename columns data frame. Suppose want rename “year” “month” variables make uppercase:","code":"\n\nrename(flights, YEAR = year, MONTH = month)\n#> # A tibble: 336,776 × 19\n#>     YEAR MONTH   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> # ℹ 336,766 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>"},{"path":"module-6.html","id":"relocate-function","chapter":"Module 6","heading":"relocate() Function","text":"relocate() function allows change positions columns data frame. two useful arguments ..helps precisely select location variable:","code":"\n\nrelocate(flights, year, .after = month)\n#> # A tibble: 336,776 × 19\n#>    month  year   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1     1  2013     1      517            515         2\n#>  2     1  2013     1      533            529         4\n#>  3     1  2013     1      542            540         2\n#>  4     1  2013     1      544            545        -1\n#>  5     1  2013     1      554            600        -6\n#>  6     1  2013     1      554            558        -4\n#>  7     1  2013     1      555            600        -5\n#>  8     1  2013     1      557            600        -3\n#>  9     1  2013     1      557            600        -3\n#> 10     1  2013     1      558            600        -2\n#> # ℹ 336,766 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nrelocate(flights, c(year, month), .before = dep_delay)\n#> # A tibble: 336,776 × 19\n#>      day dep_time sched_dep_time  year month dep_delay\n#>    <int>    <int>          <int> <int> <int>     <int>\n#>  1     1      517            515  2013     1         2\n#>  2     1      533            529  2013     1         4\n#>  3     1      542            540  2013     1         2\n#>  4     1      544            545  2013     1        -1\n#>  5     1      554            600  2013     1        -6\n#>  6     1      554            558  2013     1        -4\n#>  7     1      555            600  2013     1        -5\n#>  8     1      557            600  2013     1        -3\n#>  9     1      557            600  2013     1        -3\n#> 10     1      558            600  2013     1        -2\n#> # ℹ 336,766 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nrelocate(flights, c(year, month), .after = last_col())\n#> # A tibble: 336,776 × 19\n#>      day dep_time sched_dep_time dep_delay arr_time\n#>    <int>    <int>          <int>     <int>    <int>\n#>  1     1      517            515         2      830\n#>  2     1      533            529         4      850\n#>  3     1      542            540         2      923\n#>  4     1      544            545        -1     1004\n#>  5     1      554            600        -6      812\n#>  6     1      554            558        -4      740\n#>  7     1      555            600        -5      913\n#>  8     1      557            600        -3      709\n#>  9     1      557            600        -3      838\n#> 10     1      558            600        -2      753\n#> # ℹ 336,766 more rows\n#> # ℹ 14 more variables: sched_arr_time <int>,\n#> #   arr_delay <int>, carrier <chr>, flight <int>,\n#> #   tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>, year <int>, month <int>\n\nrelocate(flights, dep_delay, .before = everything())\n#> # A tibble: 336,776 × 19\n#>    dep_delay  year month   day dep_time sched_dep_time\n#>        <int> <int> <int> <int>    <int>          <int>\n#>  1         2  2013     1     1      517            515\n#>  2         4  2013     1     1      533            529\n#>  3         2  2013     1     1      542            540\n#>  4        -1  2013     1     1      544            545\n#>  5        -6  2013     1     1      554            600\n#>  6        -4  2013     1     1      554            558\n#>  7        -5  2013     1     1      555            600\n#>  8        -3  2013     1     1      557            600\n#>  9        -3  2013     1     1      557            600\n#> 10        -2  2013     1     1      558            600\n#> # ℹ 336,766 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>"},{"path":"module-6.html","id":"mutate-function","chapter":"Module 6","heading":"mutate() Function","text":"’s often useful add new columns functions existing columns. ’s mutate() function .mutate() always adds new columns end data set ’ll start creating narrower data set can see new variables:Now let’s add “gain” “speed” columns data frame:Note can refer columns ’ve just created:want keep new variable, use transmute() function:","code":"\n\nflights_2 <- select(flights, month, ends_with(\"delay\"), distance, air_time)\n\nmutate(flights_2, gain = dep_delay - arr_delay, speed = distance / air_time * 60)\n#> # A tibble: 336,776 × 7\n#>    month dep_delay arr_delay distance air_time  gain speed\n#>    <int>     <int>     <int>    <int>    <int> <int> <dbl>\n#>  1     1         2        11     1400      227    -9  370.\n#>  2     1         4        20     1416      227   -16  374.\n#>  3     1         2        33     1089      160   -31  408.\n#>  4     1        -1       -18     1576      183    17  517.\n#>  5     1        -6       -25      762      116    19  394.\n#>  6     1        -4        12      719      150   -16  288.\n#>  7     1        -5        19     1065      158   -24  404.\n#>  8     1        -3       -14      229       53    11  259.\n#>  9     1        -3        -8      944      140     5  405.\n#> 10     1        -2         8      733      138   -10  319.\n#> # ℹ 336,766 more rows\n\nmutate(flights_2, gain = dep_delay - arr_delay, hours = air_time/60, gain_per_hour = gain/hours)\n#> # A tibble: 336,776 × 8\n#>    month dep_delay arr_delay distance air_time  gain hours\n#>    <int>     <int>     <int>    <int>    <int> <int> <dbl>\n#>  1     1         2        11     1400      227    -9 3.78 \n#>  2     1         4        20     1416      227   -16 3.78 \n#>  3     1         2        33     1089      160   -31 2.67 \n#>  4     1        -1       -18     1576      183    17 3.05 \n#>  5     1        -6       -25      762      116    19 1.93 \n#>  6     1        -4        12      719      150   -16 2.5  \n#>  7     1        -5        19     1065      158   -24 2.63 \n#>  8     1        -3       -14      229       53    11 0.883\n#>  9     1        -3        -8      944      140     5 2.33 \n#> 10     1        -2         8      733      138   -10 2.3  \n#> # ℹ 336,766 more rows\n#> # ℹ 1 more variable: gain_per_hour <dbl>\n\ntransmute(flights_2, gain = dep_delay - arr_delay, hours = air_time/60, gain_per_hour = gain/hours)\n#> # A tibble: 336,776 × 3\n#>     gain hours gain_per_hour\n#>    <int> <dbl>         <dbl>\n#>  1    -9 3.78          -2.38\n#>  2   -16 3.78          -4.23\n#>  3   -31 2.67         -11.6 \n#>  4    17 3.05           5.57\n#>  5    19 1.93           9.83\n#>  6   -16 2.5           -6.4 \n#>  7   -24 2.63          -9.11\n#>  8    11 0.883         12.5 \n#>  9     5 2.33           2.14\n#> 10   -10 2.3           -4.35\n#> # ℹ 336,766 more rows"},{"path":"module-6.html","id":"pipe-operator","chapter":"Module 6","heading":"%>% Pipe Operator","text":"dplyr functions functional sense function calls don’t side-effects. must always save results. doesn’t lead particularly elegant code, especially want many operations . either step--step don’t want name intermediate results, need wrap function calls inside , lead messy complex code:difficult read order operations inside . Thus, arguments long way away function. get around problem, dplyr provides %>% operator. pipe operator, %>%, comes magrittr package Stefan Milton Bache. Packages tidyverse load %>% automatically, don’t usually load magrittr explicitly.x %>% f(y) turns f(x, y) can use rewrite multiple operations can read left--right, top--bottom (reading pipe operator “”):Try understand following code :","code":"\n\nselect(filter(flights, month == 11 | month == 12), starts_with(\"sched\") & ends_with(\"time\"))\n#> # A tibble: 55,403 × 2\n#>    sched_dep_time sched_arr_time\n#>             <int>          <int>\n#>  1           2359            345\n#>  2           2250           2356\n#>  3            500            651\n#>  4            545            827\n#>  5            545            855\n#>  6            600            923\n#>  7            600            659\n#>  8            600            701\n#>  9            600            827\n#> 10            600            751\n#> # ℹ 55,393 more rows\n\nflights %>% \n  \n  filter(month == 11 | month == 12) %>%\n  \n  select( starts_with(\"sched\") & ends_with(\"time\"))\n#> # A tibble: 55,403 × 2\n#>    sched_dep_time sched_arr_time\n#>             <int>          <int>\n#>  1           2359            345\n#>  2           2250           2356\n#>  3            500            651\n#>  4            545            827\n#>  5            545            855\n#>  6            600            923\n#>  7            600            659\n#>  8            600            701\n#>  9            600            827\n#> 10            600            751\n#> # ℹ 55,393 more rows\n\nflights %>% \n  \n  filter(month %in% c(10, 11, 12), arr_delay < 10) %>%\n  \n  slice(1:30) %>%\n  \n  arrange(desc(arr_delay)) %>%\n  \n  select(-c(1,4))\n#> # A tibble: 30 × 17\n#>    month   day sched_dep_time dep_delay arr_time\n#>    <int> <int>          <int>     <int>    <int>\n#>  1    10     1            600        -9      727\n#>  2    10     1            600        -2      743\n#>  3    10     1            600       -10      649\n#>  4    10     1            610        -7      735\n#>  5    10     1            600        -9      710\n#>  6    10     1            600        -2      650\n#>  7    10     1            600        -1      719\n#>  8    10     1            600         0      706\n#>  9    10     1            600       -10      648\n#> 10    10     1            600        -9      655\n#> # ℹ 20 more rows\n#> # ℹ 12 more variables: sched_arr_time <int>,\n#> #   arr_delay <int>, carrier <chr>, flight <int>,\n#> #   tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>"},{"path":"module-6.html","id":"group_by-summarise-and-across-functions","chapter":"Module 6","heading":"group_by(), summarise(), and across() Functions","text":"data operations done groups defined variables. dplyr verbs particularly powerful apply grouped data frames. important grouping verb group_by(). takes existing data frame converts grouped data frame operations performed “group”. words, takes data frame one variables group :Grouping change data looks apart listing grouped.Grouping useful used conjunction summarise() function. summarise() creates new data frame. returns one row combination grouping variables; grouping variables, output single row summarizing observations input. contain one column grouping variable one column summary statistics specified. Thus, changes unit analysis complete dataset individual groups. Together group_by() summarise() provide one tools ’ll use commonly working dplyr: grouped summaries.instance, let’s calculate average arrival delay time group by_origin grouped data:can even pass several variables :table displays useful functions frequently used summarise():group_by() summarise() functions can combined single table verbs:need remove grouping return operations ungrouped data, use ungroup():’s often useful perform operation multiple columns, copying pasting tedious error prone. example:Instead, can use across() function, lets rewrite previous code succinctly:across() two primary arguments: (1) first argument, .col, selects columns want operate ; (2) second argument, .fns, function list functions apply column. examples:can transform variable one function supplying named list functions lambda functions second argument:can control names created .names argument:","code":"\n\nby_origin <- flights %>% group_by(origin)\n\nby_origin\n#> # A tibble: 336,776 × 19\n#> # Groups:   origin [3]\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> # ℹ 336,766 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nby_origin_carrier <- flights %>% group_by(origin, carrier)\n\nby_origin_carrier\n#> # A tibble: 336,776 × 19\n#> # Groups:   origin, carrier [35]\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <int>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> # ℹ 336,766 more rows\n#> # ℹ 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <int>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <int>, distance <int>, hour <int>,\n#> #   minute <int>, time_hour <chr>\n\nby_origin %>% summarise(Mean = mean(arr_delay, na.rm = T))\n#> # A tibble: 3 × 2\n#>   origin  Mean\n#>   <chr>  <dbl>\n#> 1 EWR     9.11\n#> 2 JFK     5.55\n#> 3 LGA     5.78\n\nby_origin %>% \n  \n  summarise(Mean = mean(arr_delay, na.rm = T),\n            \n            Median = median(arr_delay, na.rm = T),\n            \n            Count = n())\n#> # A tibble: 3 × 4\n#>   origin  Mean Median  Count\n#>   <chr>  <dbl>  <dbl>  <int>\n#> 1 EWR     9.11     -4 120835\n#> 2 JFK     5.55     -6 111279\n#> 3 LGA     5.78     -5 104662\n\nby_carrier <- flights %>% group_by(carrier)\n\nby_carrier %>%\n  \n  summarise (Count = n(), Distance_sd = sd(distance)) %>%\n  \n  filter(Count < 10000) %>%\n  \n  arrange(desc(Distance_sd))\n#> # A tibble: 7 × 3\n#>   carrier Count Distance_sd\n#>   <chr>   <int>       <dbl>\n#> 1 OO         32       206. \n#> 2 FL       3260       161. \n#> 3 YV        601       160. \n#> 4 VX       5162        88.0\n#> 5 AS        714         0  \n#> 6 F9        685         0  \n#> 7 HA        342         0\n\nby_carrier %>%\n  \n  ungroup() %>%\n  \n  summarise(flights = n())\n#> # A tibble: 1 × 1\n#>   flights\n#>     <int>\n#> 1  336776\n\nflights %>% \n  \n  group_by(origin, carrier) %>%\n  \n  summarise(Mean_dep_delay = mean(dep_delay, na.rm = T),\n            \n            Mean_arrival_delay = mean(arr_delay, na.rm = T),\n            \n            Mean_air_time = mean(air_time, na.rm = T))\n#> `summarise()` has grouped output by 'origin'. You can\n#> override using the `.groups` argument.\n#> # A tibble: 35 × 5\n#> # Groups:   origin [3]\n#>    origin carrier Mean_dep_delay Mean_arrival_delay\n#>    <chr>  <chr>            <dbl>              <dbl>\n#>  1 EWR    9E                5.95              1.62 \n#>  2 EWR    AA               10.0               0.978\n#>  3 EWR    AS                5.80             -9.93 \n#>  4 EWR    B6               13.1               9.39 \n#>  5 EWR    DL               12.1               8.78 \n#>  6 EWR    EV               20.2              17.0  \n#>  7 EWR    MQ               17.5              16.3  \n#>  8 EWR    OO               20.8              21.5  \n#>  9 EWR    UA               12.5               3.48 \n#> 10 EWR    US                3.74              0.977\n#> # ℹ 25 more rows\n#> # ℹ 1 more variable: Mean_air_time <dbl>\n\nflights %>% \n  \n  group_by(origin, carrier) %>%\n  \n  summarise(across(\n    \n    c(dep_delay, arr_delay, air_time),\n    \n    ~ mean(.x, na.rm = T)\n    \n  ))\n#> `summarise()` has grouped output by 'origin'. You can\n#> override using the `.groups` argument.\n#> # A tibble: 35 × 5\n#> # Groups:   origin [3]\n#>    origin carrier dep_delay arr_delay air_time\n#>    <chr>  <chr>       <dbl>     <dbl>    <dbl>\n#>  1 EWR    9E           5.95     1.62     103. \n#>  2 EWR    AA          10.0      0.978    196. \n#>  3 EWR    AS           5.80    -9.93     326. \n#>  4 EWR    B6          13.1      9.39     118. \n#>  5 EWR    DL          12.1      8.78     125. \n#>  6 EWR    EV          20.2     17.0       94.0\n#>  7 EWR    MQ          17.5     16.3      112. \n#>  8 EWR    OO          20.8     21.5      137. \n#>  9 EWR    UA          12.5      3.48     207. \n#> 10 EWR    US           3.74     0.977    138. \n#> # ℹ 25 more rows\n\nflights %>% \n  \n  summarise(across(where(is.factor), n_distinct))\n#> # A tibble: 1 × 0\n\nflights %>% \n  \n  group_by(origin) %>%\n  \n  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))\n#> # A tibble: 3 × 15\n#>   origin  year month   day dep_time sched_dep_time dep_delay\n#>   <chr>  <dbl> <dbl> <dbl>    <dbl>          <dbl>     <dbl>\n#> 1 EWR     2013  6.49  15.7    1337.          1322.      15.1\n#> 2 JFK     2013  6.50  15.7    1399.          1402.      12.1\n#> 3 LGA     2013  6.67  15.7    1310.          1308.      10.3\n#> # ℹ 8 more variables: arr_time <dbl>, sched_arr_time <dbl>,\n#> #   arr_delay <dbl>, flight <dbl>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>\n\n\nmin_max <- list(\n  \n  min = ~min(.x, na.rm = TRUE), \n  \n  max = ~max(.x, na.rm = TRUE)\n)\n\nflights %>% \n  \n  group_by(origin) %>%\n  \n  summarise(across(where(is.numeric), min_max))\n#> # A tibble: 3 × 29\n#>   origin year_min year_max month_min month_max day_min\n#>   <chr>     <int>    <int>     <int>     <int>   <int>\n#> 1 EWR        2013     2013         1        12       1\n#> 2 JFK        2013     2013         1        12       1\n#> 3 LGA        2013     2013         1        12       1\n#> # ℹ 23 more variables: day_max <int>, dep_time_min <int>,\n#> #   dep_time_max <int>, sched_dep_time_min <int>,\n#> #   sched_dep_time_max <int>, dep_delay_min <int>,\n#> #   dep_delay_max <int>, arr_time_min <int>,\n#> #   arr_time_max <int>, sched_arr_time_min <int>,\n#> #   sched_arr_time_max <int>, arr_delay_min <int>,\n#> #   arr_delay_max <int>, flight_min <int>, …\n\nflights %>% \n  \n  group_by(origin) %>%\n  \n  summarise(across(where(is.numeric), min_max,\n                   \n                   .names = \"{.fn}.{.col}\"\n                   \n                   ))\n#> # A tibble: 3 × 29\n#>   origin min.year max.year min.month max.month min.day\n#>   <chr>     <int>    <int>     <int>     <int>   <int>\n#> 1 EWR        2013     2013         1        12       1\n#> 2 JFK        2013     2013         1        12       1\n#> 3 LGA        2013     2013         1        12       1\n#> # ℹ 23 more variables: max.day <int>, min.dep_time <int>,\n#> #   max.dep_time <int>, min.sched_dep_time <int>,\n#> #   max.sched_dep_time <int>, min.dep_delay <int>,\n#> #   max.dep_delay <int>, min.arr_time <int>,\n#> #   max.arr_time <int>, min.sched_arr_time <int>,\n#> #   max.sched_arr_time <int>, min.arr_delay <int>,\n#> #   max.arr_delay <int>, min.flight <int>, …"},{"path":"module-6.html","id":"relational-data-two-table-verbs","chapter":"Module 6","heading":"Relational Data: Two-Table Verbs","text":"’s rare data analysis involves single table data. practice, ’ll normally many tables contribute analysis, need flexible tools combine .dplyr, three families verbs work two tables time:Mutating joins, add new variables one table matching rows anotherFiltering joins, filter observations one table based whether match observation tableSet operations, combine observations data sets set elements","code":""},{"path":"module-6.html","id":"mutating-joins","chapter":"Module 6","heading":"Mutating joins","text":"Mutating joins allow combine variables multiple tables. first matches observations keys, copies across variables one table . four types mutating join, differ behavior match found. :inner_join()left_join()right_join()full_join()functions input arguments. focusing following arguments:x y - tables dataframes combined (x known primary table y secondary table)- join key, variable variables /used match rows x y tables. words, controls variables used match observations two tables.keep - logical operator indicating whether join keys x y tables preserved output. default value FALSE.output always new table. default, observation x matches multiple observations y, matching observations y returned. occurs, normally warning thrown stating multiple matches detected since usually surprising.illustrative functions work, using following toy data frames:","code":"\n\ndf1 <- data.frame(\n  \n  a = c(1, 2, 3, 2, 4),\n  \n  b = c(10, 20, 30, 35, 40),\n  \n  c  = c(100, 200, 300, 350, 400)\n  \n)\n\nprint(df1)\n#>   a  b   c\n#> 1 1 10 100\n#> 2 2 20 200\n#> 3 3 30 300\n#> 4 2 35 350\n#> 5 4 40 400\n\ndf2 <- data.frame(\n  \n  a =  c(1, 2, 5, 4, 6, 2),\n  \n  b  =  c(10, 40, 50, 40, 60, 50),\n  \n  x = c(15, 25, 35, 45, 55, 65),\n  \n  z = c(150, 200, 350, 400, 550, 270)\n\n)\n\nprint(df2)\n#>   a  b  x   z\n#> 1 1 10 15 150\n#> 2 2 40 25 200\n#> 3 5 50 35 350\n#> 4 4 40 45 400\n#> 5 6 60 55 550\n#> 6 2 50 65 270"},{"path":"module-6.html","id":"inner_join","chapter":"Module 6","heading":"inner_join()","text":"simplest type join inner join. inner join matches pairs observations whenever keys equal. output inner join new data frame contains key, x values, y values. important property inner join unmatched rows either input included result.examples inner join:","code":"\n\n# Merging tables by the \"a\" variable\n\ndf1 %>%\n  \n  inner_join(df2, by = \"a\")\n#> Warning in inner_join(., df2, by = \"a\"): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 2 of `x` matches multiple rows in `y`.\n#> ℹ Row 2 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\n#>   a b.x   c b.y  x   z\n#> 1 1  10 100  10 15 150\n#> 2 2  20 200  40 25 200\n#> 3 2  20 200  50 65 270\n#> 4 2  35 350  40 25 200\n#> 5 2  35 350  50 65 270\n#> 6 4  40 400  40 45 400\n\n# Merging tables by the \"a\" and \"b\" variable\n\ndf1 %>%\n  \n  inner_join(df2, by = c(\"a\", \"b\"))\n#>   a  b   c  x   z\n#> 1 1 10 100 15 150\n#> 2 4 40 400 45 400\n\n## Merging tables by the \"c\" and \"z\" variable (Have different variable names)\n\ndf1 %>%\n  \n  inner_join(df2, by = c(\"c\" = \"z\"))\n#>   a.x b.x   c a.y b.y  x\n#> 1   2  20 200   2  40 25\n#> 2   2  35 350   5  50 35\n#> 3   4  40 400   4  40 45\n\n## Merging tables by the \"c\" and \"z\" variable (Have different variable names) and keeping both key variables in the output table\n\ndf1 %>%\n  \n  inner_join(df2, by = c(\"c\" = \"z\"), keep = T)\n#>   a.x b.x   c a.y b.y  x   z\n#> 1   2  20 200   2  40 25 200\n#> 2   2  35 350   5  50 35 350\n#> 3   4  40 400   4  40 45 400"},{"path":"module-6.html","id":"left_join","chapter":"Module 6","heading":"left_join()","text":"left_join() includes observations x, regardless whether match . commonly used join ensures don’t lose observations primary table:","code":"\n\n# Merging tables by the \"a\" variable\n\ndf1 %>%\n  \n  left_join(df2, by = \"a\")\n#> Warning in left_join(., df2, by = \"a\"): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 2 of `x` matches multiple rows in `y`.\n#> ℹ Row 2 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\n#>   a b.x   c b.y  x   z\n#> 1 1  10 100  10 15 150\n#> 2 2  20 200  40 25 200\n#> 3 2  20 200  50 65 270\n#> 4 3  30 300  NA NA  NA\n#> 5 2  35 350  40 25 200\n#> 6 2  35 350  50 65 270\n#> 7 4  40 400  40 45 400\n\n# Merging tables by the \"a\" and \"b\" variable\n\ndf1 %>%\n  \n  left_join(df2, by = c(\"a\", \"b\"))\n#>   a  b   c  x   z\n#> 1 1 10 100 15 150\n#> 2 2 20 200 NA  NA\n#> 3 3 30 300 NA  NA\n#> 4 2 35 350 NA  NA\n#> 5 4 40 400 45 400\n\n## Merging tables by the \"c\" and \"z\" variable (Have different variable names)\n\ndf1 %>%\n  \n  left_join(df2, by = c(\"c\" = \"z\"))\n#>   a.x b.x   c a.y b.y  x\n#> 1   1  10 100  NA  NA NA\n#> 2   2  20 200   2  40 25\n#> 3   3  30 300  NA  NA NA\n#> 4   2  35 350   5  50 35\n#> 5   4  40 400   4  40 45"},{"path":"module-6.html","id":"right_join","chapter":"Module 6","heading":"right_join()","text":"right_join() includes observations y:","code":"\n\n# Merging tables by the \"a\" variable\n\ndf1 %>%\n  \n  right_join(df2, by = \"a\")\n#> Warning in right_join(., df2, by = \"a\"): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 2 of `x` matches multiple rows in `y`.\n#> ℹ Row 2 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\n#>   a b.x   c b.y  x   z\n#> 1 1  10 100  10 15 150\n#> 2 2  20 200  40 25 200\n#> 3 2  20 200  50 65 270\n#> 4 2  35 350  40 25 200\n#> 5 2  35 350  50 65 270\n#> 6 4  40 400  40 45 400\n#> 7 5  NA  NA  50 35 350\n#> 8 6  NA  NA  60 55 550\n\n# Merging tables by the \"a\" and \"b\" variable\n\ndf1 %>%\n  \n  right_join(df2, by = c(\"a\", \"b\"))\n#>   a  b   c  x   z\n#> 1 1 10 100 15 150\n#> 2 4 40 400 45 400\n#> 3 2 40  NA 25 200\n#> 4 5 50  NA 35 350\n#> 5 6 60  NA 55 550\n#> 6 2 50  NA 65 270\n\n## Merging tables by the \"c\" and \"z\" variable (Have different variable names)\n\ndf1 %>%\n  \n  right_join(df2, by = c(\"c\" = \"z\"))\n#>   a.x b.x   c a.y b.y  x\n#> 1   2  20 200   2  40 25\n#> 2   2  35 350   5  50 35\n#> 3   4  40 400   4  40 45\n#> 4  NA  NA 150   1  10 15\n#> 5  NA  NA 550   6  60 55\n#> 6  NA  NA 270   2  50 65"},{"path":"module-6.html","id":"full_join","chapter":"Module 6","heading":"full_join()","text":"full_join() includes observations x y:","code":"\n\n# Merging tables by the \"a\" variable\n\ndf1 %>%\n  \n  full_join(df2, by = \"a\")\n#> Warning in full_join(., df2, by = \"a\"): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 2 of `x` matches multiple rows in `y`.\n#> ℹ Row 2 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\n#>   a b.x   c b.y  x   z\n#> 1 1  10 100  10 15 150\n#> 2 2  20 200  40 25 200\n#> 3 2  20 200  50 65 270\n#> 4 3  30 300  NA NA  NA\n#> 5 2  35 350  40 25 200\n#> 6 2  35 350  50 65 270\n#> 7 4  40 400  40 45 400\n#> 8 5  NA  NA  50 35 350\n#> 9 6  NA  NA  60 55 550\n\n# Merging tables by the \"a\" and \"b\" variable\n\ndf1 %>%\n  \n  full_join(df2, by = c(\"a\", \"b\"))\n#>   a  b   c  x   z\n#> 1 1 10 100 15 150\n#> 2 2 20 200 NA  NA\n#> 3 3 30 300 NA  NA\n#> 4 2 35 350 NA  NA\n#> 5 4 40 400 45 400\n#> 6 2 40  NA 25 200\n#> 7 5 50  NA 35 350\n#> 8 6 60  NA 55 550\n#> 9 2 50  NA 65 270\n\n## Merging tables by the \"c\" and \"z\" variable (Have different variable names)\n\ndf1 %>%\n  \n  full_join(df2, by = c(\"c\" = \"z\"))\n#>   a.x b.x   c a.y b.y  x\n#> 1   1  10 100  NA  NA NA\n#> 2   2  20 200   2  40 25\n#> 3   3  30 300  NA  NA NA\n#> 4   2  35 350   5  50 35\n#> 5   4  40 400   4  40 45\n#> 6  NA  NA 150   1  10 15\n#> 7  NA  NA 550   6  60 55\n#> 8  NA  NA 270   2  50 65"},{"path":"module-6.html","id":"filtering-joins","chapter":"Module 6","heading":"Filtering joins","text":"Filtering joins match observations way mutating joins, affect observations, variables. two types:semi_join(x, y) - keeps observations x match yanti_join(x, y) - drops observations x match y","code":"\n\ndf1 %>%\n  \n  semi_join(df2, by = \"a\")\n#>   a  b   c\n#> 1 1 10 100\n#> 2 2 20 200\n#> 3 2 35 350\n#> 4 4 40 400\n\ndf1 %>%\n  \n  semi_join(df2, by = c(\"a\", \"b\"))\n#>   a  b   c\n#> 1 1 10 100\n#> 2 4 40 400\n\ndf1 %>%\n  \n  anti_join(df2, by = \"a\")\n#>   a  b   c\n#> 1 3 30 300\n\ndf1 %>%\n  \n  anti_join(df2, by = c(\"a\", \"b\"))\n#>   a  b   c\n#> 1 2 20 200\n#> 2 3 30 300\n#> 3 2 35 350"},{"path":"module-6.html","id":"set-operations","chapter":"Module 6","heading":"Set Operations","text":"Set operations expect x y tables variables, treat observations sets:itersect(x, y) - returns observations x yunion(x, y) - returns unique observations x ysetdiff(x, y) - returns observations x, yWe first create toy data frames apply functions :","code":"\n\ndf1 <- data.frame(\n  \n  a = c(1, 2, 3, 4, 5),\n  \n  b = c(10, 20, 30, 40, 50)\n  \n)\n\ndf1\n#>   a  b\n#> 1 1 10\n#> 2 2 20\n#> 3 3 30\n#> 4 4 40\n#> 5 5 50\n\ndf2 <- data.frame(\n  \n  a = c(1, 2, 3, 4, 5),\n  \n  b = c(10, 15, 30, 45, 65)\n  \n)\n\ndf2\n#>   a  b\n#> 1 1 10\n#> 2 2 15\n#> 3 3 30\n#> 4 4 45\n#> 5 5 65\n\nintersect(df1, df2)\n#>   a  b\n#> 1 1 10\n#> 2 3 30\n\nunion(df1, df2)\n#>   a  b\n#> 1 1 10\n#> 2 2 20\n#> 3 3 30\n#> 4 4 40\n#> 5 5 50\n#> 6 2 15\n#> 7 4 45\n#> 8 5 65\n\nsetdiff(df1, df2)\n#>   a  b\n#> 1 2 20\n#> 2 4 40\n#> 3 5 50\n\nsetdiff(df2, df1)\n#>   a  b\n#> 1 2 15\n#> 2 4 45\n#> 3 5 65"},{"path":"module-6.html","id":"practice-data-sets","chapter":"Module 6","heading":"Practice Data Sets","text":"two data sets can use practice two-table verbs:","code":"\n\ndata1 <- data.frame(\n  \n  Name = c(\"James\", \"Linda\", \"Jim\", \"Margo\", \"Nick\", \"Stacy\", \"Mary\", \"Tom\", \"Anna\", \"Bob\", \"Jeniffer\", \"Lucas\", \"Amy\"),\n  \n  Age = c(22, 56, 34, 48, 19, 25, 31, 68, 72, 42, 39, 52, 39),\n  \n  State = c(\"California\", \"New York\", \"New York\", \"California\", \"Michigan\", \"Texas\", \"Ohio\", \"Arizona\", \"Texas\", \"Florida\", \"Nebraska\", \"Indiana\", \"Florida\"),\n  \n  state_abr = c(\"CA\", \"NY\", \"NY\", \"CA\", \"MI\", \"TX\", \"OH\", \"AZ\", \"TX\", \"FL\", \"NE\", \"IN\", \"FL\"),\n  \n  City = c(\"Los Angeles\", \"New York\", \"Buffalo\", \"San Diego\", \"Detroit\", \"Austin\", \"Cleveland\", \"Phoenix\", \"Houston\", \"Tampa\", \"Lincoln\", \"Indianapolis\", \"Miami\"),\n  \n  Salary = c(30000, 96500, 72000, 59000, 54300, 25000, 61000, 64000, 74700, 40000, 83000, 92400, 82000)\n  \n)\n\ndata1\n#>        Name Age      State state_abr         City Salary\n#> 1     James  22 California        CA  Los Angeles  30000\n#> 2     Linda  56   New York        NY     New York  96500\n#> 3       Jim  34   New York        NY      Buffalo  72000\n#> 4     Margo  48 California        CA    San Diego  59000\n#> 5      Nick  19   Michigan        MI      Detroit  54300\n#> 6     Stacy  25      Texas        TX       Austin  25000\n#> 7      Mary  31       Ohio        OH    Cleveland  61000\n#> 8       Tom  68    Arizona        AZ      Phoenix  64000\n#> 9      Anna  72      Texas        TX      Houston  74700\n#> 10      Bob  42    Florida        FL        Tampa  40000\n#> 11 Jeniffer  39   Nebraska        NE      Lincoln  83000\n#> 12    Lucas  52    Indiana        IN Indianapolis  92400\n#> 13      Amy  39    Florida        FL        Miami  82000\n\ndata2 <- data.frame(\n  \n  State = c(\"Washington\", \"Florida\", \"Nebraska\", \"Indiana\", \"Florida\",\"California\", \"New York\", \"New York\", \"California\", \"Michigan\", \"Texas\", \"Ohio\", \"Arizona\", \"Utah\"),\n  \n  state_abbriviation = c(\"WA\", \"FL\", \"NE\", \"IN\", \"FL\",\"CA\", \"NY\", \"NY\", \"CA\", \"MI\", \"TX\", \"OH\", \"AZ\", \"UT\"),\n  \n  City = c( \"Seatle\", \"Tampa\", \"Lincoln\", \"Indianapolis\", \"Miami\",\"Los Angeles\", \"New York\", \"Ithaca\", \"San Francisco\", \"Detroit\", \"Dallas\", \"Cleveland\", \"Phoenix\", \"Salt Lake City\"),\n  \n  Average_salary = c(63500, 53900, 59900, 59800, 57900, 79000, 80000, 75000, 85000, 54000, 63800, 57000, 61000, 58600)\n  \n) \n\ndata2\n#>         State state_abbriviation           City\n#> 1  Washington                 WA         Seatle\n#> 2     Florida                 FL          Tampa\n#> 3    Nebraska                 NE        Lincoln\n#> 4     Indiana                 IN   Indianapolis\n#> 5     Florida                 FL          Miami\n#> 6  California                 CA    Los Angeles\n#> 7    New York                 NY       New York\n#> 8    New York                 NY         Ithaca\n#> 9  California                 CA  San Francisco\n#> 10   Michigan                 MI        Detroit\n#> 11      Texas                 TX         Dallas\n#> 12       Ohio                 OH      Cleveland\n#> 13    Arizona                 AZ        Phoenix\n#> 14       Utah                 UT Salt Lake City\n#>    Average_salary\n#> 1           63500\n#> 2           53900\n#> 3           59900\n#> 4           59800\n#> 5           57900\n#> 6           79000\n#> 7           80000\n#> 8           75000\n#> 9           85000\n#> 10          54000\n#> 11          63800\n#> 12          57000\n#> 13          61000\n#> 14          58600"},{"path":"module-7.html","id":"module-7","chapter":"Module 7","heading":"Module 7","text":" ","code":""},{"path":"module-7.html","id":"tidyr-package","chapter":"Module 7","heading":"tidyr Package","text":"Normally 80% data analysis spent cleaning preparing data. ’s just first step, must repeated many times course analysis new problems come light new data collected. module learn organize data R, organization called tidy data.principles tidy data provide standard way organize data values within dataset. tidy data standard designed facilitate initial exploration analysis data, simplify development data analysis tools work well together. Tidy datasets provide standardized way link structure dataset (physical layout) semantics (meaning).statistical datasets data frames made rows columns. dataset collection values, usually either numbers (quantitative) strings (qualitative). Values organised two ways. Every value belongs variable observation. variable contains values measure underlying attribute across units. observation contains values measured unit across attributes. instance, consider following datasets (datasets available Courseworks Module_07_data file):show data organised four different ways. dataset shows values four variables country, year, population, cases, dataset organises values different way. Even though representations underlying data, equally easy use. One dataset, tidy dataset, much easier work inside tidyverse.three interrelated rules make dataset tidy:variable must columnEach observation must rowEach value must cellThere two main advantages working tidy data:’s general advantage picking one consistent way storing data. consistent data structure, ’s easier learn tools work underlying uniformity.’s general advantage picking one consistent way storing data. consistent data structure, ’s easier learn tools work underlying uniformity.’s specific advantage placing variables columns allows R’s vectorised nature shine.’s specific advantage placing variables columns allows R’s vectorised nature shine.","code":"\n\nprint(table1)\n#> # A tibble: 6 × 4\n#>   country      year  cases population\n#>   <chr>       <dbl>  <dbl>      <dbl>\n#> 1 Afghanistan  1999    745   19987071\n#> 2 Afghanistan  2000   2666   20595360\n#> 3 Brazil       1999  37737  172006362\n#> 4 Brazil       2000  80488  174504898\n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\nprint(table2)\n#> # A tibble: 12 × 4\n#>    country      year type            count\n#>    <chr>       <dbl> <chr>           <dbl>\n#>  1 Afghanistan  1999 cases             745\n#>  2 Afghanistan  1999 population   19987071\n#>  3 Afghanistan  2000 cases            2666\n#>  4 Afghanistan  2000 population   20595360\n#>  5 Brazil       1999 cases           37737\n#>  6 Brazil       1999 population  172006362\n#>  7 Brazil       2000 cases           80488\n#>  8 Brazil       2000 population  174504898\n#>  9 China        1999 cases          212258\n#> 10 China        1999 population 1272915272\n#> 11 China        2000 cases          213766\n#> 12 China        2000 population 1280428583\n\nprint(table3)\n#> # A tibble: 6 × 3\n#>   country      year rate             \n#>   <chr>       <dbl> <chr>            \n#> 1 Afghanistan  1999 745/19987071     \n#> 2 Afghanistan  2000 2666/20595360    \n#> 3 Brazil       1999 37737/172006362  \n#> 4 Brazil       2000 80488/174504898  \n#> 5 China        1999 212258/1272915272\n#> 6 China        2000 213766/1280428583\n\nprint(table4a) # cases\n#> # A tibble: 3 × 3\n#>   country     `1999` `2000`\n#>   <chr>        <dbl>  <dbl>\n#> 1 Afghanistan    745   2666\n#> 2 Brazil       37737  80488\n#> 3 China       212258 213766\n\nprint(table4b) # population\n#> # A tibble: 3 × 3\n#>   country         `1999`     `2000`\n#>   <chr>            <dbl>      <dbl>\n#> 1 Afghanistan   19987071   20595360\n#> 2 Brazil       172006362  174504898\n#> 3 China       1272915272 1280428583"},{"path":"module-7.html","id":"pivoting","chapter":"Module 7","heading":"Pivoting","text":"","code":""},{"path":"module-7.html","id":"pivot_longer-function","chapter":"Module 7","heading":"pivot_longer() function","text":"Unfortunately, data encounter untidy. example, consider table4a:dataset column names names variables, values variable. Specifically, column names 1999 2000 represent values year variable, values 1999 2000 columns represent values cases variable, row represents two observations, one.tidy dataset like , need pivot offending columns new pair variables. describe operation need three parameters:set columns whose names values, variables. example, columns 1999 2000The name variable move column names . yearThe name variable move column values . ’s casesTogether parameters generate call pivot_longer() function:Let’s repeat procedure table4b:Now let’s put together create complete dataset:","code":"\n\nprint(table4a) # cases\n#> # A tibble: 3 × 3\n#>   country     `1999` `2000`\n#>   <chr>        <dbl>  <dbl>\n#> 1 Afghanistan    745   2666\n#> 2 Brazil       37737  80488\n#> 3 China       212258 213766\n\ntable4a %>% \n  \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n#> # A tibble: 6 × 3\n#>   country     year   cases\n#>   <chr>       <chr>  <dbl>\n#> 1 Afghanistan 1999     745\n#> 2 Afghanistan 2000    2666\n#> 3 Brazil      1999   37737\n#> 4 Brazil      2000   80488\n#> 5 China       1999  212258\n#> 6 China       2000  213766\n\ntable4b %>%\n  \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"population\")\n#> # A tibble: 6 × 3\n#>   country     year  population\n#>   <chr>       <chr>      <dbl>\n#> 1 Afghanistan 1999    19987071\n#> 2 Afghanistan 2000    20595360\n#> 3 Brazil      1999   172006362\n#> 4 Brazil      2000   174504898\n#> 5 China       1999  1272915272\n#> 6 China       2000  1280428583\n\ntidy4a <- table4a %>% \n  \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n\n\n\ntidy4b <- table4b %>% \n  \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"population\")\n\n\ntidy_4a_4b <- left_join(tidy4a, tidy4b)\n#> Joining with `by = join_by(country, year)`\n\nprint(tidy_4a_4b)\n#> # A tibble: 6 × 4\n#>   country     year   cases population\n#>   <chr>       <chr>  <dbl>      <dbl>\n#> 1 Afghanistan 1999     745   19987071\n#> 2 Afghanistan 2000    2666   20595360\n#> 3 Brazil      1999   37737  172006362\n#> 4 Brazil      2000   80488  174504898\n#> 5 China       1999  212258 1272915272\n#> 6 China       2000  213766 1280428583"},{"path":"module-7.html","id":"pivot_wider-function","chapter":"Module 7","heading":"pivot_wider() function","text":"pivot_wider() opposite pivot_longer(). use observation scattered across multiple rows. instance, table2 observation country year, observation spread across two rows:tidy , need two parameters:column take variable names . , ’s typeThe column take values . ’s count","code":"\n\nprint(table2)\n#> # A tibble: 12 × 4\n#>    country      year type            count\n#>    <chr>       <dbl> <chr>           <dbl>\n#>  1 Afghanistan  1999 cases             745\n#>  2 Afghanistan  1999 population   19987071\n#>  3 Afghanistan  2000 cases            2666\n#>  4 Afghanistan  2000 population   20595360\n#>  5 Brazil       1999 cases           37737\n#>  6 Brazil       1999 population  172006362\n#>  7 Brazil       2000 cases           80488\n#>  8 Brazil       2000 population  174504898\n#>  9 China        1999 cases          212258\n#> 10 China        1999 population 1272915272\n#> 11 China        2000 cases          213766\n#> 12 China        2000 population 1280428583\n\ntable2 %>%\n  \n  pivot_wider(names_from = type, values_from = count)\n#> # A tibble: 6 × 4\n#>   country      year  cases population\n#>   <chr>       <dbl>  <dbl>      <dbl>\n#> 1 Afghanistan  1999    745   19987071\n#> 2 Afghanistan  2000   2666   20595360\n#> 3 Brazil       1999  37737  172006362\n#> 4 Brazil       2000  80488  174504898\n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583"},{"path":"module-7.html","id":"separating-and-uniting","chapter":"Module 7","heading":"Separating and Uniting","text":"","code":""},{"path":"module-7.html","id":"separate-function","chapter":"Module 7","heading":"separate() Function","text":"separate() pulls apart one column multiple columns, splitting wherever separator character appears. example, table3 rate column contains cases population variables, need split two variables:separate() takes name column separate, names columns separate well specific character separate column:separate() leaves type column . However, can ask try convert better types using convert = TRUE:can also pass vector integers sep. separate() interpret integers positions split . Positive values start 1 far-left strings; negative value start -1 far-right strings. examples:","code":"\n\nprint(table3)\n#> # A tibble: 6 × 3\n#>   country      year rate             \n#>   <chr>       <dbl> <chr>            \n#> 1 Afghanistan  1999 745/19987071     \n#> 2 Afghanistan  2000 2666/20595360    \n#> 3 Brazil       1999 37737/172006362  \n#> 4 Brazil       2000 80488/174504898  \n#> 5 China        1999 212258/1272915272\n#> 6 China        2000 213766/1280428583\n\ntable3 %>%\n  \n  separate(rate, into = c(\"cases\", \"population\"), sep = \"/\")\n#> # A tibble: 6 × 4\n#>   country      year cases  population\n#>   <chr>       <dbl> <chr>  <chr>     \n#> 1 Afghanistan  1999 745    19987071  \n#> 2 Afghanistan  2000 2666   20595360  \n#> 3 Brazil       1999 37737  172006362 \n#> 4 Brazil       2000 80488  174504898 \n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\ntable3 %>% \n  \n  separate(rate, into = c(\"cases\", \"population\"), convert = TRUE)\n#> # A tibble: 6 × 4\n#>   country      year  cases population\n#>   <chr>       <dbl>  <int>      <int>\n#> 1 Afghanistan  1999    745   19987071\n#> 2 Afghanistan  2000   2666   20595360\n#> 3 Brazil       1999  37737  172006362\n#> 4 Brazil       2000  80488  174504898\n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\ntable3 %>% \n  \n  separate(year, into = c(\"century\", \"year\"), sep = 2)\n#> # A tibble: 6 × 4\n#>   country     century year  rate             \n#>   <chr>       <chr>   <chr> <chr>            \n#> 1 Afghanistan 19      99    745/19987071     \n#> 2 Afghanistan 20      00    2666/20595360    \n#> 3 Brazil      19      99    37737/172006362  \n#> 4 Brazil      20      00    80488/174504898  \n#> 5 China       19      99    212258/1272915272\n#> 6 China       20      00    213766/1280428583\n\ntable3 %>% \n  \n  separate(year, into = c(\"century\", \"year\"), sep = 3)\n#> # A tibble: 6 × 4\n#>   country     century year  rate             \n#>   <chr>       <chr>   <chr> <chr>            \n#> 1 Afghanistan 199     9     745/19987071     \n#> 2 Afghanistan 200     0     2666/20595360    \n#> 3 Brazil      199     9     37737/172006362  \n#> 4 Brazil      200     0     80488/174504898  \n#> 5 China       199     9     212258/1272915272\n#> 6 China       200     0     213766/1280428583\n\ntable3 %>% \n  \n  separate(year, into = c(\"century\", \"year\"), sep = -3)\n#> # A tibble: 6 × 4\n#>   country     century year  rate             \n#>   <chr>       <chr>   <chr> <chr>            \n#> 1 Afghanistan 1       999   745/19987071     \n#> 2 Afghanistan 2       000   2666/20595360    \n#> 3 Brazil      1       999   37737/172006362  \n#> 4 Brazil      2       000   80488/174504898  \n#> 5 China       1       999   212258/1272915272\n#> 6 China       2       000   213766/1280428583"},{"path":"module-7.html","id":"unite-function","chapter":"Module 7","heading":"unite() Function","text":"unite() inverse separate(): combines multiple columns single column. can use unite() rejoin century year columns table5:unite() takes data frame, name new variable create, set columns combine:default place underscore _ values different columns. Use sep argument specify columns merged:","code":"\n\nprint(table5)\n#> # A tibble: 6 × 4\n#>   country     century year  rate             \n#>   <chr>       <chr>   <chr> <chr>            \n#> 1 Afghanistan 19      99    745/19987071     \n#> 2 Afghanistan 20      00    2666/20595360    \n#> 3 Brazil      19      99    37737/172006362  \n#> 4 Brazil      20      00    80488/174504898  \n#> 5 China       19      99    212258/1272915272\n#> 6 China       20      00    213766/1280428583\n\ntable5 %>% \n  \n  unite(new, century, year)\n#> # A tibble: 6 × 3\n#>   country     new   rate             \n#>   <chr>       <chr> <chr>            \n#> 1 Afghanistan 19_99 745/19987071     \n#> 2 Afghanistan 20_00 2666/20595360    \n#> 3 Brazil      19_99 37737/172006362  \n#> 4 Brazil      20_00 80488/174504898  \n#> 5 China       19_99 212258/1272915272\n#> 6 China       20_00 213766/1280428583\n\ntable5 %>% \n  \n  unite(new, century, year, sep = \"\")\n#> # A tibble: 6 × 3\n#>   country     new   rate             \n#>   <chr>       <chr> <chr>            \n#> 1 Afghanistan 1999  745/19987071     \n#> 2 Afghanistan 2000  2666/20595360    \n#> 3 Brazil      1999  37737/172006362  \n#> 4 Brazil      2000  80488/174504898  \n#> 5 China       1999  212258/1272915272\n#> 6 China       2000  213766/1280428583"},{"path":"module-7.html","id":"missing-values","chapter":"Module 7","heading":"Missing Values","text":"value can missing one two possible ways:Explicitly - flagged NAImplicitly - simply present dataConsider following dataset:two missing values dataset:return fourth quarter 2015 explicitly missing, cell value instead contains NAThe return first quarter 2016 implicitly missing, simply appear datasetWe can make implicit missing values explicit. One way using pivot_wider() function:can simply use complete() function. takes set columns, finds unique combinations. ensures original dataset contains values, filling explicit NAs necessary:can fill missing values fill(). takes set columns want missing values replaced recent non-missing value (sometimes called last observation carried forward):can change direction fill missing values. instance, let’s fill missing values value comes right missing values:replace_na() function allows replace missing values specific values:Finally, can drop missing values dataset:","code":"\n\nstocks <- data.frame(\n  \n  year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),\n  \n  qtr    = c(   1,    2,    3,    4,    2,    3,    4),\n  \n  return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)\n)\n\nprint(stocks)\n#>   year qtr return\n#> 1 2015   1   1.88\n#> 2 2015   2   0.59\n#> 3 2015   3   0.35\n#> 4 2015   4     NA\n#> 5 2016   2   0.92\n#> 6 2016   3   0.17\n#> 7 2016   4   2.66\n\nstocks %>% \n  \n  pivot_wider(names_from = year, values_from = return)\n#> # A tibble: 4 × 3\n#>     qtr `2015` `2016`\n#>   <dbl>  <dbl>  <dbl>\n#> 1     1   1.88  NA   \n#> 2     2   0.59   0.92\n#> 3     3   0.35   0.17\n#> 4     4  NA      2.66\n\nstocks %>% \n  \n  complete(year, qtr)\n#> # A tibble: 8 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2  2015     2   0.59\n#> 3  2015     3   0.35\n#> 4  2015     4  NA   \n#> 5  2016     1  NA   \n#> 6  2016     2   0.92\n#> 7  2016     3   0.17\n#> 8  2016     4   2.66\n\nstocks %>% \n  \n  complete(year, qtr) %>%\n  \n  fill(return)\n#> # A tibble: 8 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2  2015     2   0.59\n#> 3  2015     3   0.35\n#> 4  2015     4   0.35\n#> 5  2016     1   0.35\n#> 6  2016     2   0.92\n#> 7  2016     3   0.17\n#> 8  2016     4   2.66\n\nstocks %>% \n  \n  complete(year, qtr) %>%\n  \n  fill(return, .direction = \"up\")\n#> # A tibble: 8 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2  2015     2   0.59\n#> 3  2015     3   0.35\n#> 4  2015     4   0.92\n#> 5  2016     1   0.92\n#> 6  2016     2   0.92\n#> 7  2016     3   0.17\n#> 8  2016     4   2.66\n\nstocks %>% \n  \n  complete(year, qtr) %>%\n  \n  replace_na(list(return = 0))\n#> # A tibble: 8 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2  2015     2   0.59\n#> 3  2015     3   0.35\n#> 4  2015     4   0   \n#> 5  2016     1   0   \n#> 6  2016     2   0.92\n#> 7  2016     3   0.17\n#> 8  2016     4   2.66\n\nstocks %>% \n  \n  complete(year, qtr) %>%\n  \n  drop_na()\n#> # A tibble: 6 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2  2015     2   0.59\n#> 3  2015     3   0.35\n#> 4  2016     2   0.92\n#> 5  2016     3   0.17\n#> 6  2016     4   2.66"},{"path":"module-7.html","id":"lets-practice","chapter":"Module 7","heading":"Let’s Practice","text":"datasets practice tidyr functions . addition, can find examples function can utilized. Try understand function . datasets available Courseworks (Module_07_data file).","code":""},{"path":"module-7.html","id":"relationship-between-income-and-religion-in-the-us","chapter":"Module 7","heading":"Relationship between Income and Religion in the US","text":"","code":"\n\nrelig_income %>% \n  \n  pivot_longer(-religion, names_to = \"income\", values_to = \"frequency\")\n#> # A tibble: 180 × 3\n#>    religion income             frequency\n#>    <chr>    <chr>                  <dbl>\n#>  1 Agnostic <$10k                     27\n#>  2 Agnostic $10-20k                   34\n#>  3 Agnostic $20-30k                   60\n#>  4 Agnostic $30-40k                   81\n#>  5 Agnostic $40-50k                   76\n#>  6 Agnostic $50-75k                  137\n#>  7 Agnostic $75-100k                 122\n#>  8 Agnostic $100-150k                109\n#>  9 Agnostic >150k                     84\n#> 10 Agnostic Don't know/refused        96\n#> # ℹ 170 more rows"},{"path":"module-7.html","id":"tuberculosis-data-from-world-health-organization-who","chapter":"Module 7","heading":"Tuberculosis data from World Health Organization (WHO)","text":"","code":"\n\nwho1 <- who %>%\n  \n    pivot_longer(\n    \n    cols = new_sp_m014:newrel_f65,\n    \n    names_to = \"key\",\n    \n    values_to = \"cases\", \n    \n    values_drop_na = TRUE)\n\nprint(who1)\n#> # A tibble: 76,046 × 6\n#>    country     iso2  iso3   year key          cases\n#>    <chr>       <chr> <chr> <dbl> <chr>        <dbl>\n#>  1 Afghanistan AF    AFG    1997 new_sp_m014      0\n#>  2 Afghanistan AF    AFG    1997 new_sp_m1524    10\n#>  3 Afghanistan AF    AFG    1997 new_sp_m2534     6\n#>  4 Afghanistan AF    AFG    1997 new_sp_m3544     3\n#>  5 Afghanistan AF    AFG    1997 new_sp_m4554     5\n#>  6 Afghanistan AF    AFG    1997 new_sp_m5564     2\n#>  7 Afghanistan AF    AFG    1997 new_sp_m65       0\n#>  8 Afghanistan AF    AFG    1997 new_sp_f014      5\n#>  9 Afghanistan AF    AFG    1997 new_sp_f1524    38\n#> 10 Afghanistan AF    AFG    1997 new_sp_f2534    36\n#> # ℹ 76,036 more rows\n\n## just run this code\n\nwho2 <- who1 %>% \n  \n  mutate(key = stringr::str_replace(key, \"newrel\", \"new_rel\"))\n\nwho3 <- who2 %>% \n  \n  separate(key, c(\"new\", \"type\", \"sexage\"), sep = \"_\")\n\nprint(who3)\n#> # A tibble: 76,046 × 8\n#>    country     iso2  iso3   year new   type  sexage cases\n#>    <chr>       <chr> <chr> <dbl> <chr> <chr> <chr>  <dbl>\n#>  1 Afghanistan AF    AFG    1997 new   sp    m014       0\n#>  2 Afghanistan AF    AFG    1997 new   sp    m1524     10\n#>  3 Afghanistan AF    AFG    1997 new   sp    m2534      6\n#>  4 Afghanistan AF    AFG    1997 new   sp    m3544      3\n#>  5 Afghanistan AF    AFG    1997 new   sp    m4554      5\n#>  6 Afghanistan AF    AFG    1997 new   sp    m5564      2\n#>  7 Afghanistan AF    AFG    1997 new   sp    m65        0\n#>  8 Afghanistan AF    AFG    1997 new   sp    f014       5\n#>  9 Afghanistan AF    AFG    1997 new   sp    f1524     38\n#> 10 Afghanistan AF    AFG    1997 new   sp    f2534     36\n#> # ℹ 76,036 more rows\n\nwho4 <- who3 %>%\n  \n  separate(sexage, c(\"sex\", \"age\"), sep = 1)\n\nprint(who4)\n#> # A tibble: 76,046 × 9\n#>    country   iso2  iso3   year new   type  sex   age   cases\n#>    <chr>     <chr> <chr> <dbl> <chr> <chr> <chr> <chr> <dbl>\n#>  1 Afghanis… AF    AFG    1997 new   sp    m     014       0\n#>  2 Afghanis… AF    AFG    1997 new   sp    m     1524     10\n#>  3 Afghanis… AF    AFG    1997 new   sp    m     2534      6\n#>  4 Afghanis… AF    AFG    1997 new   sp    m     3544      3\n#>  5 Afghanis… AF    AFG    1997 new   sp    m     4554      5\n#>  6 Afghanis… AF    AFG    1997 new   sp    m     5564      2\n#>  7 Afghanis… AF    AFG    1997 new   sp    m     65        0\n#>  8 Afghanis… AF    AFG    1997 new   sp    f     014       5\n#>  9 Afghanis… AF    AFG    1997 new   sp    f     1524     38\n#> 10 Afghanis… AF    AFG    1997 new   sp    f     2534     36\n#> # ℹ 76,036 more rows"},{"path":"module-7.html","id":"billboard-charts-data","chapter":"Module 7","heading":"Billboard charts data","text":"","code":"\n\nbillboard2 <- billboard %>% \n  \n  pivot_longer(\n    \n    cols = starts_with(\"wk\"), \n    \n    names_to = \"week\",\n    \n    values_to = \"rank\", \n    \n    values_drop_na = TRUE)\n\nprint(billboard2)\n#> # A tibble: 5,307 × 5\n#>    artist  track                   date.entered week   rank\n#>    <chr>   <chr>                   <date>       <chr> <dbl>\n#>  1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n#>  2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n#>  3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n#>  4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n#>  5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n#>  6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n#>  7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n#>  8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n#>  9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n#> 10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n#> # ℹ 5,297 more rows\n\nbillboard3 <- billboard %>% \n  \n  pivot_longer(\n    \n    cols = starts_with(\"wk\"), \n    \n    names_to = \"week\",\n    \n    names_prefix = \"wk\",\n    \n    names_transform = as.integer,\n    \n    values_to = \"rank\", \n    \n    values_drop_na = TRUE)\n\n\nprint(billboard3)\n#> # A tibble: 5,307 × 5\n#>    artist  track                   date.entered  week  rank\n#>    <chr>   <chr>                   <date>       <int> <dbl>\n#>  1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n#>  2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n#>  3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n#>  4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n#>  5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n#>  6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n#>  7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n#>  8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n#>  9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n#> 10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n#> # ℹ 5,297 more rows\n\nbillboard3 %>%\n  \n  arrange(artist, track, week)\n#> # A tibble: 5,307 × 5\n#>    artist  track                   date.entered  week  rank\n#>    <chr>   <chr>                   <date>       <int> <dbl>\n#>  1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n#>  2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n#>  3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n#>  4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n#>  5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n#>  6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n#>  7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n#>  8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n#>  9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n#> 10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n#> # ℹ 5,297 more rows"},{"path":"problem-set-2.html","id":"problem-set-2","chapter":"Problem Set 2","heading":"Problem Set 2","text":" working datasets containing demographic information midwest counties 2000 US census. Dataset_1, Dataset_2, Dataset_3 available Courseworks. Dataset_1 contains following variables:PID - Unique county identifiercounty - County namearea - Area county (units unknown). variable spread across 5 columns (IL - WI)poptotal - Total populationstate - State county belongs  Dataset_2 contains following variables:PID - Unique county identifiercounty - County namerace - Total population racial group (White, Black, American Indians, Asians, races)inmetro - factor levels 0 1 indicate whether county considered metro areacategory - Miscellaneous Dataset_3 contains following variables:PID - Unique county identifiercounty - County namepopadults - Number adultsperchsd - Percent population high school diplomapercollege - Percent college educated populationpercprof - Percent population professional degreepercbelowpoverty - Percent population poverty linepercchildbelowpovert - Percent children poverty linepercadultpoverty - Percent adults poverty linepercelderlypoverty - Percent elderly poverty line Note: original description dataset documented current descriptions (provided tidyverse package) based speculation. ","code":""},{"path":"problem-set-2.html","id":"problem-1-2","chapter":"Problem Set 2","heading":"Problem 1","text":"Dataset_1 area variable spread across multiple columns represent values state variable. Transform/Tidy dataset follows: move column names (IL-WI) state variable column values area variable. , remove missing value dataset. Name new dataset data1. Dataset_2 race variable combines information total population racial group, given following order: White, Black, American Indians, Asians, . Pull apart column multiple columns, splitting wherever separator character appers. Name variables popwhite, popblack, popamerindian, popasian, popother, respectively. Name new dataset data2. Merge data1 data2: joined state variable output result contain observation data1, regardless whether match . dimensions output? many missing values contain?\nRepeat procedure joining datasets state county variables.Merge data1 data2: joined state variable output result contain observation data1, regardless whether match . dimensions output? many missing values contain?Repeat procedure joining datasets state county variables. Merge data1 data2: joined state variable output result contain observation data2, regardless whether match . dimensions output? many missing values contain?\nRepeat procedure joining datasets state county variables.Merge data1 data2: joined state variable output result contain observation data2, regardless whether match . dimensions output? many missing values contain?Repeat procedure joining datasets state county variables. Merge data1 data2: joined state variable output result contain observation data1 data2, regardless whether match . dimensions output? many missing values contain?\nRepeat procedure joining datasets state county variables.Merge data1 data2: joined state variable output result contain observation data1 data2, regardless whether match . dimensions output? many missing values contain?Repeat procedure joining datasets state county variables. Join data1 data2 state county variables unmatched rows either input dataset included result. Name output dataset data. Remove PID category data selecting variables except two. , remove duplicates dataset. Add new variable dataset (name popdensity), represents population density county (order compute population density need divide total population corresponding area).\n, racial group, add new variable dataset represent percentage total population belongs group (name percwhite, percblack, percamerindan, percasian, percother, respectively).Add new variable dataset (name popdensity), represents population density county (order compute population density need divide total population corresponding area)., racial group, add new variable dataset represent percentage total population belongs group (name percwhite, percblack, percamerindan, percasian, percother, respectively). Join data Dataset_3 state county variables unmatched rows either input dataset included result. Add new variables dataset correspond percbelowpoverty percadultpoverty variables represent actual number people belong groups. Name variables popcbelowpoverty, popcadultpoverty, respectively. Move inmetro variable end dataset; change position poptotal variable comes area variables; change position popdensity variable comes poptotal variables. biggest/smallest state total population? biggest/smallest state total area? average population density state? state, compare population densities counties metro area counties . Hint: might want use grouping functions. states combined, average percentage racial group? state separately, average percentage racial group? state separately, compare average percentage racial group metro areas non-metro areas. Discuss results obtained. , state calculate average percentage total population poverty. Now using measurement, compare metro areas non-metro areas state. observe? Now filter counties less 50000 population repeat previous step. observe?","code":""},{"path":"ps-2-solutions.html","id":"ps-2-solutions","chapter":"PS 2 Solutions","heading":"PS 2 Solutions","text":"  Dataset_1 area variable spread across multiple columns represent values state variable. Transform/Tidy dataset follows: move column names (IL-WI) state variable column values area variable. , remove missing value dataset. Name new dataset data1. Dataset_2 race variable combines information total population racial group, given following order: White, Black, American Indians, Asians, . Pull apart column multiple columns, splitting wherever separator character appers. Name variables popwhite, popblack, popamerindian, popasian, popother, respectively. Name new dataset data2. Merge data1 data2: joined state variable output result contain observation data1, regardless whether match . dimensions output? many missing values contain?\nRepeat procedure joining datasets state county variables.Merge data1 data2: joined state variable output result contain observation data1, regardless whether match . dimensions output? many missing values contain?Repeat procedure joining datasets state county variables. Merge data1 data2: joined state variable output result contain observation data2, regardless whether match . dimensions output? many missing values contain?\nRepeat procedure joining datasets state county variables.Merge data1 data2: joined state variable output result contain observation data2, regardless whether match . dimensions output? many missing values contain?Repeat procedure joining datasets state county variables. Merge data1 data2: joined state variable output result contain observation data1 data2, regardless whether match . dimensions output? many missing values contain?\nRepeat procedure joining datasets state county variables.Merge data1 data2: joined state variable output result contain observation data1 data2, regardless whether match . dimensions output? many missing values contain?Repeat procedure joining datasets state county variables. Join data1 data2 state county variables unmatched rows either input dataset included result. Name output dataset data. Remove PID category data selecting variables except two. , remove duplicates dataset. Add new variable dataset (name popdensity), represents population density county (order compute population density need divide total population corresponding area).\n, racial group, add new variable dataset represent percentage total population belongs group (name percwhite, percblack, percamerindan, percasian, percother, respectively).Add new variable dataset (name popdensity), represents population density county (order compute population density need divide total population corresponding area)., racial group, add new variable dataset represent percentage total population belongs group (name percwhite, percblack, percamerindan, percasian, percother, respectively). Join data Dataset_3 state county variables unmatched rows either input dataset included result. Add new variables dataset correspond percbelowpoverty percadultpoverty variables represent actual number people belong groups. Name variables popcbelowpoverty, popcadultpoverty, respectively. Move inmetro variable end dataset; change position poptotal variable comes area variables; change position popdensity variable comes poptotal variables. biggest/smallest state total population? biggest/smallest state total area? average population density state? state, compare population densities counties metro area counties . Hint: might want use grouping functions.state minimum total population “WI”, state maximum total population “IL”.state minimum total area “”, state maximum total area “MI”. states combined, average percentage racial group? state separately, average percentage racial group? state separately, compare average percentage racial group metro areas non-metro areas. Discuss results obtained.Percentages white higher non-metro area. Percentages black higher metro area. Percentages American indian higher non-metro area. Percentages Asian higher metro area. Percentages race groups higher metro area. , state calculate average percentage total population poverty. Now using measurement, compare metro areas non-metro areas state. observe? Now filter counties less 50000 population repeat previous step. observe?Percentages poverty higher non-metro area.significance percentages -poverty non-metro area higher metro area becomes less.","code":"\n\nlibrary(tidyverse)\n#> ── Attaching core tidyverse packages ──── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n#> ✔ purrr     1.0.4     \n#> ── Conflicts ────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nDataset_1 <- as_tibble(read.csv(\"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp/Dataset_1.csv\"))\n\nDataset_2 <- as_tibble(read.csv(\"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp/Dataset_2.csv\"))\n\nDataset_3 <- as_tibble(read.csv(\"C:/Users/alexp/OneDrive/Desktop/R Bootcamp/R_bootcamp/Dataset_3.csv\"))\n\ndata1 <- Dataset_1 %>%\n  pivot_longer(IL:WI, names_to=\"state\", values_to=\"area\", values_drop_na=T)\ndata1\n#> # A tibble: 457 × 5\n#>      PID county    poptotal state  area\n#>    <int> <chr>        <int> <chr> <dbl>\n#>  1   561 ADAMS        66090 IL    0.052\n#>  2   562 ALEXANDER    10626 IL    0.014\n#>  3   563 BOND         14991 IL    0.022\n#>  4   564 BOONE        30806 IL    0.017\n#>  5   565 BROWN         5836 IL    0.018\n#>  6   566 BUREAU       35688 IL    0.05 \n#>  7   567 CALHOUN       5322 IL    0.017\n#>  8   568 CARROLL      16805 IL    0.027\n#>  9   569 CASS         13437 IL    0.024\n#> 10   570 CHAMPAIGN   173025 IL    0.058\n#> # ℹ 447 more rows\ndata2 <- Dataset_2 %>%\n  separate(race, into=c(\"popwhite\", \"popblack\", \"popamerindian\", \"popasian\", \"popother\"), sep=\"/\", convert=T)\ndata2\n#> # A tibble: 487 × 9\n#>    county    state popwhite popblack popamerindian popasian\n#>    <chr>     <chr>    <int>    <int>         <int>    <int>\n#>  1 ADAMS     IL       63917     1702            98      249\n#>  2 ALEXANDER IL        7054     3496            19       48\n#>  3 BOND      IL       14477      429            35       16\n#>  4 BOONE     IL       29344      127            46      150\n#>  5 BROWN     IL        5264      547            14        5\n#>  6 BUREAU    IL       35157       50            65      195\n#>  7 CALHOUN   IL        5298        1             8       15\n#>  8 CARROLL   IL       16519      111            30       61\n#>  9 CASS      IL       13384       16             8       23\n#> 10 CHAMPAIGN IL      146506    16559           331     8033\n#> # ℹ 477 more rows\n#> # ℹ 3 more variables: popother <int>, inmetro <int>,\n#> #   category <chr>\nout3_1 <- data1 %>%\n  left_join(data2, by=\"state\")\n#> Warning in left_join(., data2, by = \"state\"): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 1 of `x` matches multiple rows in `y`.\n#> ℹ Row 1 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\nout3_1\n#> # A tibble: 46,825 × 13\n#>      PID county.x poptotal state  area county.y  popwhite\n#>    <int> <chr>       <int> <chr> <dbl> <chr>        <int>\n#>  1   561 ADAMS       66090 IL    0.052 ADAMS        63917\n#>  2   561 ADAMS       66090 IL    0.052 ALEXANDER     7054\n#>  3   561 ADAMS       66090 IL    0.052 BOND         14477\n#>  4   561 ADAMS       66090 IL    0.052 BOONE        29344\n#>  5   561 ADAMS       66090 IL    0.052 BROWN         5264\n#>  6   561 ADAMS       66090 IL    0.052 BUREAU       35157\n#>  7   561 ADAMS       66090 IL    0.052 CALHOUN       5298\n#>  8   561 ADAMS       66090 IL    0.052 CARROLL      16519\n#>  9   561 ADAMS       66090 IL    0.052 CASS         13384\n#> 10   561 ADAMS       66090 IL    0.052 CHAMPAIGN   146506\n#> # ℹ 46,815 more rows\n#> # ℹ 6 more variables: popblack <int>, popamerindian <int>,\n#> #   popasian <int>, popother <int>, inmetro <int>,\n#> #   category <chr>\ndim_desc(out3_1)\n#> [1] \"[46,825 x 13]\"\nout3_1 %>%\n  summarize(across(everything(), ~sum(is.na(.))))\n#> # A tibble: 1 × 13\n#>     PID county.x poptotal state  area county.y popwhite\n#>   <int>    <int>    <int> <int> <int>    <int>    <int>\n#> 1     0        0        0     0     0        0        0\n#> # ℹ 6 more variables: popblack <int>, popamerindian <int>,\n#> #   popasian <int>, popother <int>, inmetro <int>,\n#> #   category <int>\nout3_2 <- data1 %>%\n  left_join(data2, by=c(\"state\", \"county\"))\n#> Warning in left_join(., data2, by = c(\"state\", \"county\")): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 1 of `x` matches multiple rows in `y`.\n#> ℹ Row 1 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\nout3_2\n#> # A tibble: 527 × 12\n#>      PID county    poptotal state  area popwhite popblack\n#>    <int> <chr>        <int> <chr> <dbl>    <int>    <int>\n#>  1   561 ADAMS        66090 IL    0.052    63917     1702\n#>  2   561 ADAMS        66090 IL    0.052    63917     1702\n#>  3   562 ALEXANDER    10626 IL    0.014     7054     3496\n#>  4   562 ALEXANDER    10626 IL    0.014     7054     3496\n#>  5   563 BOND         14991 IL    0.022    14477      429\n#>  6   563 BOND         14991 IL    0.022    14477      429\n#>  7   564 BOONE        30806 IL    0.017    29344      127\n#>  8   564 BOONE        30806 IL    0.017    29344      127\n#>  9   565 BROWN         5836 IL    0.018     5264      547\n#> 10   565 BROWN         5836 IL    0.018     5264      547\n#> # ℹ 517 more rows\n#> # ℹ 5 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>, category <chr>\ndim_desc(out3_2)\n#> [1] \"[527 x 12]\"\nout3_2 %>%\n  summarize(across(everything(), ~sum(is.na(.))))\n#> # A tibble: 1 × 12\n#>     PID county poptotal state  area popwhite popblack\n#>   <int>  <int>    <int> <int> <int>    <int>    <int>\n#> 1     0      0        0     0     0        0        0\n#> # ℹ 5 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>, category <int>\nout4_1 <- data1 %>%\n  right_join(data2, by=\"state\")\n#> Warning in right_join(., data2, by = \"state\"): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 1 of `x` matches multiple rows in `y`.\n#> ℹ Row 1 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\nout4_1\n#> # A tibble: 46,825 × 13\n#>      PID county.x poptotal state  area county.y  popwhite\n#>    <int> <chr>       <int> <chr> <dbl> <chr>        <int>\n#>  1   561 ADAMS       66090 IL    0.052 ADAMS        63917\n#>  2   561 ADAMS       66090 IL    0.052 ALEXANDER     7054\n#>  3   561 ADAMS       66090 IL    0.052 BOND         14477\n#>  4   561 ADAMS       66090 IL    0.052 BOONE        29344\n#>  5   561 ADAMS       66090 IL    0.052 BROWN         5264\n#>  6   561 ADAMS       66090 IL    0.052 BUREAU       35157\n#>  7   561 ADAMS       66090 IL    0.052 CALHOUN       5298\n#>  8   561 ADAMS       66090 IL    0.052 CARROLL      16519\n#>  9   561 ADAMS       66090 IL    0.052 CASS         13384\n#> 10   561 ADAMS       66090 IL    0.052 CHAMPAIGN   146506\n#> # ℹ 46,815 more rows\n#> # ℹ 6 more variables: popblack <int>, popamerindian <int>,\n#> #   popasian <int>, popother <int>, inmetro <int>,\n#> #   category <chr>\ndim_desc(out4_1)\n#> [1] \"[46,825 x 13]\"\nout4_1 %>%\n  summarize(across(everything(), ~sum(is.na(.))))\n#> # A tibble: 1 × 13\n#>     PID county.x poptotal state  area county.y popwhite\n#>   <int>    <int>    <int> <int> <int>    <int>    <int>\n#> 1     0        0        0     0     0        0        0\n#> # ℹ 6 more variables: popblack <int>, popamerindian <int>,\n#> #   popasian <int>, popother <int>, inmetro <int>,\n#> #   category <int>\nout4_2 <- data1 %>%\n  right_join(data2, by=c(\"state\",\"county\"))\n#> Warning in right_join(., data2, by = c(\"state\", \"county\")): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 1 of `x` matches multiple rows in `y`.\n#> ℹ Row 1 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\nout4_2\n#> # A tibble: 527 × 12\n#>      PID county    poptotal state  area popwhite popblack\n#>    <int> <chr>        <int> <chr> <dbl>    <int>    <int>\n#>  1   561 ADAMS        66090 IL    0.052    63917     1702\n#>  2   561 ADAMS        66090 IL    0.052    63917     1702\n#>  3   562 ALEXANDER    10626 IL    0.014     7054     3496\n#>  4   562 ALEXANDER    10626 IL    0.014     7054     3496\n#>  5   563 BOND         14991 IL    0.022    14477      429\n#>  6   563 BOND         14991 IL    0.022    14477      429\n#>  7   564 BOONE        30806 IL    0.017    29344      127\n#>  8   564 BOONE        30806 IL    0.017    29344      127\n#>  9   565 BROWN         5836 IL    0.018     5264      547\n#> 10   565 BROWN         5836 IL    0.018     5264      547\n#> # ℹ 517 more rows\n#> # ℹ 5 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>, category <chr>\ndim_desc(out4_2)\n#> [1] \"[527 x 12]\"\nout4_2 %>%\n  summarize(across(everything(), ~sum(is.na(.))))\n#> # A tibble: 1 × 12\n#>     PID county poptotal state  area popwhite popblack\n#>   <int>  <int>    <int> <int> <int>    <int>    <int>\n#> 1     0      0        0     0     0        0        0\n#> # ℹ 5 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>, category <int>\nout5_1 <- data1 %>%\n  full_join(data2, by=\"state\")\n#> Warning in full_join(., data2, by = \"state\"): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 1 of `x` matches multiple rows in `y`.\n#> ℹ Row 1 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\nout5_1\n#> # A tibble: 46,825 × 13\n#>      PID county.x poptotal state  area county.y  popwhite\n#>    <int> <chr>       <int> <chr> <dbl> <chr>        <int>\n#>  1   561 ADAMS       66090 IL    0.052 ADAMS        63917\n#>  2   561 ADAMS       66090 IL    0.052 ALEXANDER     7054\n#>  3   561 ADAMS       66090 IL    0.052 BOND         14477\n#>  4   561 ADAMS       66090 IL    0.052 BOONE        29344\n#>  5   561 ADAMS       66090 IL    0.052 BROWN         5264\n#>  6   561 ADAMS       66090 IL    0.052 BUREAU       35157\n#>  7   561 ADAMS       66090 IL    0.052 CALHOUN       5298\n#>  8   561 ADAMS       66090 IL    0.052 CARROLL      16519\n#>  9   561 ADAMS       66090 IL    0.052 CASS         13384\n#> 10   561 ADAMS       66090 IL    0.052 CHAMPAIGN   146506\n#> # ℹ 46,815 more rows\n#> # ℹ 6 more variables: popblack <int>, popamerindian <int>,\n#> #   popasian <int>, popother <int>, inmetro <int>,\n#> #   category <chr>\ndim_desc(out5_1)\n#> [1] \"[46,825 x 13]\"\nout5_1 %>%\n  summarize(across(everything(), ~sum(is.na(.))))\n#> # A tibble: 1 × 13\n#>     PID county.x poptotal state  area county.y popwhite\n#>   <int>    <int>    <int> <int> <int>    <int>    <int>\n#> 1     0        0        0     0     0        0        0\n#> # ℹ 6 more variables: popblack <int>, popamerindian <int>,\n#> #   popasian <int>, popother <int>, inmetro <int>,\n#> #   category <int>\nout5_2 <- data1 %>%\n  full_join(data2, by=c(\"state\",\"county\"))\n#> Warning in full_join(., data2, by = c(\"state\", \"county\")): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 1 of `x` matches multiple rows in `y`.\n#> ℹ Row 1 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\nout5_2\n#> # A tibble: 527 × 12\n#>      PID county    poptotal state  area popwhite popblack\n#>    <int> <chr>        <int> <chr> <dbl>    <int>    <int>\n#>  1   561 ADAMS        66090 IL    0.052    63917     1702\n#>  2   561 ADAMS        66090 IL    0.052    63917     1702\n#>  3   562 ALEXANDER    10626 IL    0.014     7054     3496\n#>  4   562 ALEXANDER    10626 IL    0.014     7054     3496\n#>  5   563 BOND         14991 IL    0.022    14477      429\n#>  6   563 BOND         14991 IL    0.022    14477      429\n#>  7   564 BOONE        30806 IL    0.017    29344      127\n#>  8   564 BOONE        30806 IL    0.017    29344      127\n#>  9   565 BROWN         5836 IL    0.018     5264      547\n#> 10   565 BROWN         5836 IL    0.018     5264      547\n#> # ℹ 517 more rows\n#> # ℹ 5 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>, category <chr>\ndim_desc(out5_2)\n#> [1] \"[527 x 12]\"\nout5_2 %>%\n  summarize(across(everything(), ~sum(is.na(.))))\n#> # A tibble: 1 × 12\n#>     PID county poptotal state  area popwhite popblack\n#>   <int>  <int>    <int> <int> <int>    <int>    <int>\n#> 1     0      0        0     0     0        0        0\n#> # ℹ 5 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>, category <int>\ndata <- data1 %>%\n  inner_join(data2, by=c(\"state\",\"county\"))\n#> Warning in inner_join(., data2, by = c(\"state\", \"county\")): Detected an unexpected many-to-many relationship between\n#> `x` and `y`.\n#> ℹ Row 1 of `x` matches multiple rows in `y`.\n#> ℹ Row 1 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set\n#>   `relationship = \"many-to-many\"` to silence this warning.\ndata\n#> # A tibble: 527 × 12\n#>      PID county    poptotal state  area popwhite popblack\n#>    <int> <chr>        <int> <chr> <dbl>    <int>    <int>\n#>  1   561 ADAMS        66090 IL    0.052    63917     1702\n#>  2   561 ADAMS        66090 IL    0.052    63917     1702\n#>  3   562 ALEXANDER    10626 IL    0.014     7054     3496\n#>  4   562 ALEXANDER    10626 IL    0.014     7054     3496\n#>  5   563 BOND         14991 IL    0.022    14477      429\n#>  6   563 BOND         14991 IL    0.022    14477      429\n#>  7   564 BOONE        30806 IL    0.017    29344      127\n#>  8   564 BOONE        30806 IL    0.017    29344      127\n#>  9   565 BROWN         5836 IL    0.018     5264      547\n#> 10   565 BROWN         5836 IL    0.018     5264      547\n#> # ℹ 517 more rows\n#> # ℹ 5 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>, category <chr>\ndata <- data %>%\n  select(!c(PID, category)) %>%\n  distinct()\ndata\n#> # A tibble: 437 × 10\n#>    county    poptotal state  area popwhite popblack\n#>    <chr>        <int> <chr> <dbl>    <int>    <int>\n#>  1 ADAMS        66090 IL    0.052    63917     1702\n#>  2 ALEXANDER    10626 IL    0.014     7054     3496\n#>  3 BOND         14991 IL    0.022    14477      429\n#>  4 BOONE        30806 IL    0.017    29344      127\n#>  5 BROWN         5836 IL    0.018     5264      547\n#>  6 BUREAU       35688 IL    0.05     35157       50\n#>  7 CALHOUN       5322 IL    0.017     5298        1\n#>  8 CARROLL      16805 IL    0.027    16519      111\n#>  9 CASS         13437 IL    0.024    13384       16\n#> 10 CHAMPAIGN   173025 IL    0.058   146506    16559\n#> # ℹ 427 more rows\n#> # ℹ 4 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>\ndata <- data %>%\n  mutate(popdensity=poptotal/area, \n         percwhite=100*popwhite/poptotal,\n         percblack=100*popblack/poptotal,\n         percamerindian=100*popamerindian/poptotal,\n         percasian=100*popasian/poptotal,\n         percother=100*popother/poptotal)\ndata[8:13]\n#> # A tibble: 437 × 6\n#>    popasian popother inmetro popdensity percwhite percblack\n#>       <int>    <int>   <int>      <dbl>     <dbl>     <dbl>\n#>  1      249      124       0   1270962.      96.7    2.58  \n#>  2       48        9       0    759000       66.4   32.9   \n#>  3       16       34       0    681409.      96.6    2.86  \n#>  4      150     1139       1   1812118.      95.3    0.412 \n#>  5        5        6       0    324222.      90.2    9.37  \n#>  6      195      221       0    713760       98.5    0.140 \n#>  7       15        0       0    313059.      99.5    0.0188\n#>  8       61       84       0    622407.      98.3    0.661 \n#>  9       23        6       0    559875       99.6    0.119 \n#> 10     8033     1596       1   2983190.      84.7    9.57  \n#> # ℹ 427 more rows\ndata3 <- Dataset_3\ndata3\n#> # A tibble: 437 × 10\n#>    county    state popadults perchsd percollege percprof\n#>    <chr>     <chr>     <int>   <dbl>      <dbl>    <dbl>\n#>  1 ADAMS     IL        43298    75.1       19.6     4.36\n#>  2 ALEXANDER IL         6724    59.7       11.2     2.87\n#>  3 BOND      IL         9669    69.3       17.0     4.49\n#>  4 BOONE     IL        19272    75.5       17.3     4.20\n#>  5 BROWN     IL         3979    68.9       14.5     3.37\n#>  6 BUREAU    IL        23444    76.6       18.9     3.28\n#>  7 CALHOUN   IL         3583    62.8       11.9     3.21\n#>  8 CARROLL   IL        11323    76.0       16.2     3.06\n#>  9 CASS      IL         8825    72.3       14.1     3.21\n#> 10 CHAMPAIGN IL        95971    87.5       41.3    17.8 \n#> # ℹ 427 more rows\n#> # ℹ 4 more variables: percbelowpoverty <dbl>,\n#> #   percchildbelowpovert <dbl>, percadultpoverty <dbl>,\n#> #   percelderlypoverty <dbl>\ndata <- data %>%\n  inner_join(data3, by=c(\"state\",\"county\"))\ndata\n#> # A tibble: 437 × 24\n#>    county    poptotal state  area popwhite popblack\n#>    <chr>        <int> <chr> <dbl>    <int>    <int>\n#>  1 ADAMS        66090 IL    0.052    63917     1702\n#>  2 ALEXANDER    10626 IL    0.014     7054     3496\n#>  3 BOND         14991 IL    0.022    14477      429\n#>  4 BOONE        30806 IL    0.017    29344      127\n#>  5 BROWN         5836 IL    0.018     5264      547\n#>  6 BUREAU       35688 IL    0.05     35157       50\n#>  7 CALHOUN       5322 IL    0.017     5298        1\n#>  8 CARROLL      16805 IL    0.027    16519      111\n#>  9 CASS         13437 IL    0.024    13384       16\n#> 10 CHAMPAIGN   173025 IL    0.058   146506    16559\n#> # ℹ 427 more rows\n#> # ℹ 18 more variables: popamerindian <int>, popasian <int>,\n#> #   popother <int>, inmetro <int>, popdensity <dbl>,\n#> #   percwhite <dbl>, percblack <dbl>, percamerindian <dbl>,\n#> #   percasian <dbl>, percother <dbl>, popadults <int>,\n#> #   perchsd <dbl>, percollege <dbl>, percprof <dbl>,\n#> #   percbelowpoverty <dbl>, percchildbelowpovert <dbl>, …\ndata <- data %>%\n  mutate(popcbelowpoverty=poptotal*percbelowpoverty,\n         popcadultpoverty=popadults*percadultpoverty)\ndata[24:26]\n#> # A tibble: 437 × 3\n#>    percelderlypoverty popcbelowpoverty popcadultpoverty\n#>                 <dbl>            <dbl>            <dbl>\n#>  1              12.4           869179.          476701.\n#>  2              25.2           342628.          184141.\n#>  3              12.7           180924.          104929.\n#>  4               6.22          222081.          106690.\n#>  5              19.2            78904.           44339.\n#>  6              11.0           371142.          191755.\n#>  7              21.1            80627.           46337.\n#>  8               9.53          196799.          113536.\n#>  9              13.7           186440.          105144.\n#> 10               8.11         2694421.         1685513.\n#> # ℹ 427 more rows\ndata <- data %>%\n  relocate(inmetro, .after=last_col()) %>%\n  relocate(poptotal, .after=area) %>%\n  relocate(popdensity, .after=poptotal)\ndata[3:8]\n#> # A tibble: 437 × 6\n#>     area poptotal popdensity popwhite popblack popamerindian\n#>    <dbl>    <int>      <dbl>    <int>    <int>         <int>\n#>  1 0.052    66090   1270962.    63917     1702            98\n#>  2 0.014    10626    759000      7054     3496            19\n#>  3 0.022    14991    681409.    14477      429            35\n#>  4 0.017    30806   1812118.    29344      127            46\n#>  5 0.018     5836    324222.     5264      547            14\n#>  6 0.05     35688    713760     35157       50            65\n#>  7 0.017     5322    313059.     5298        1             8\n#>  8 0.027    16805    622407.    16519      111            30\n#>  9 0.024    13437    559875     13384       16             8\n#> 10 0.058   173025   2983190.   146506    16559           331\n#> # ℹ 427 more rows\ndata[23:26]\n#> # A tibble: 437 × 4\n#>    percelderlypoverty popcbelowpoverty popcadultpoverty\n#>                 <dbl>            <dbl>            <dbl>\n#>  1              12.4           869179.          476701.\n#>  2              25.2           342628.          184141.\n#>  3              12.7           180924.          104929.\n#>  4               6.22          222081.          106690.\n#>  5              19.2            78904.           44339.\n#>  6              11.0           371142.          191755.\n#>  7              21.1            80627.           46337.\n#>  8               9.53          196799.          113536.\n#>  9              13.7           186440.          105144.\n#> 10               8.11         2694421.         1685513.\n#> # ℹ 427 more rows\n#> # ℹ 1 more variable: inmetro <int>\ndata %>%\n  group_by(state) %>%\n  summarise(tot_pop = sum(poptotal)) %>%\n  arrange(tot_pop)\n#> # A tibble: 5 × 2\n#>   state  tot_pop\n#>   <chr>    <int>\n#> 1 WI     4891769\n#> 2 IN     5544159\n#> 3 MI     9295297\n#> 4 OH    10847115\n#> 5 IL    11430602\ndata %>%\n  group_by(state) %>%\n  summarise(tot_area = sum(area)) %>%\n  arrange(tot_area)\n#> # A tibble: 5 × 2\n#>   state tot_area\n#>   <chr>    <dbl>\n#> 1 IN        2.13\n#> 2 OH        2.42\n#> 3 WI        3.29\n#> 4 IL        3.30\n#> 5 MI        3.36\ndata %>%\n  group_by(state) %>%\n  summarise(avg_popdensity = mean(popdensity))\n#> # A tibble: 5 × 2\n#>   state avg_popdensity\n#>   <chr>          <dbl>\n#> 1 IL          2823731.\n#> 2 IN          2573130.\n#> 3 MI          3010809.\n#> 4 OH          4639024.\n#> 5 WI          2372694.\ndata %>%\n  group_by(state, inmetro) %>%\n  summarise(avg_popdensity = mean(popdensity))\n#> `summarise()` has grouped output by 'state'. You can\n#> override using the `.groups` argument.\n#> # A tibble: 10 × 3\n#> # Groups:   state [5]\n#>    state inmetro avg_popdensity\n#>    <chr>   <int>          <dbl>\n#>  1 IL          0        773783.\n#>  2 IL          1       8241451.\n#>  3 IN          0       1183804.\n#>  4 IN          1       4638344.\n#>  5 MI          0        743790.\n#>  6 MI          1       8270292.\n#>  7 OH          0       1506462.\n#>  8 OH          1       8398098.\n#>  9 WI          0        674527.\n#> 10 WI          1       6787929.\ndata %>%\n  summarise(across(percwhite:percother, ~mean(.x)))\n#> # A tibble: 1 × 5\n#>   percwhite percblack percamerindian percasian percother\n#>       <dbl>     <dbl>          <dbl>     <dbl>     <dbl>\n#> 1      95.6      2.68          0.799     0.487     0.479\ndata %>%\n  group_by(state) %>%\n  summarise(across(percwhite:percother, ~mean(.x)))\n#> # A tibble: 5 × 6\n#>   state percwhite percblack percamerindian percasian\n#>   <chr>     <dbl>     <dbl>          <dbl>     <dbl>\n#> 1 IL         95.0     3.65           0.174     0.564\n#> 2 IN         97.2     1.89           0.222     0.383\n#> 3 MI         94.4     3.07           1.37      0.507\n#> 4 OH         95.4     3.51           0.184     0.433\n#> 5 WI         95.8     0.822          2.52      0.556\n#> # ℹ 1 more variable: percother <dbl>\ndata %>%\n  group_by(state, inmetro) %>%\n  summarise(across(percwhite:percother, ~mean(.x)))\n#> `summarise()` has grouped output by 'state'. You can\n#> override using the `.groups` argument.\n#> # A tibble: 10 × 7\n#> # Groups:   state [5]\n#>    state inmetro percwhite percblack percamerindian\n#>    <chr>   <int>     <dbl>     <dbl>          <dbl>\n#>  1 IL          0      96.5     2.70           0.169\n#>  2 IL          1      90.9     6.17           0.186\n#>  3 IN          0      98.4     0.881          0.233\n#>  4 IN          1      95.4     3.39           0.206\n#>  5 MI          0      96.5     1.06           1.73 \n#>  6 MI          1      89.6     7.71           0.508\n#>  7 OH          0      97.4     1.61           0.188\n#>  8 OH          1      93.0     5.80           0.179\n#>  9 WI          0      95.9     0.248          3.27 \n#> 10 WI          1      95.4     2.31           0.564\n#> # ℹ 2 more variables: percasian <dbl>, percother <dbl>\ndata %>%\n  group_by(state) %>%\n  summarise(mean(percbelowpoverty))\n#> # A tibble: 5 × 2\n#>   state `mean(percbelowpoverty)`\n#>   <chr>                    <dbl>\n#> 1 IL                        13.1\n#> 2 IN                        10.3\n#> 3 MI                        14.2\n#> 4 OH                        13.0\n#> 5 WI                        11.9\ndata %>%\n  group_by(state, inmetro) %>%\n  summarise(mean(percbelowpoverty))\n#> `summarise()` has grouped output by 'state'. You can\n#> override using the `.groups` argument.\n#> # A tibble: 10 × 3\n#> # Groups:   state [5]\n#>    state inmetro `mean(percbelowpoverty)`\n#>    <chr>   <int>                    <dbl>\n#>  1 IL          0                    14.4 \n#>  2 IL          1                     9.56\n#>  3 IN          0                    10.8 \n#>  4 IN          1                     9.59\n#>  5 MI          0                    15.5 \n#>  6 MI          1                    11.3 \n#>  7 OH          0                    14.3 \n#>  8 OH          1                    11.5 \n#>  9 WI          0                    13.0 \n#> 10 WI          1                     9.01\ndata %>%\n  filter(poptotal >= 50000) %>%\n  group_by(state, inmetro) %>%\n  summarise(mean(percbelowpoverty))\n#> `summarise()` has grouped output by 'state'. You can\n#> override using the `.groups` argument.\n#> # A tibble: 10 × 3\n#> # Groups:   state [5]\n#>    state inmetro `mean(percbelowpoverty)`\n#>    <chr>   <int>                    <dbl>\n#>  1 IL          0                    15.7 \n#>  2 IL          1                    10.6 \n#>  3 IN          0                    10.6 \n#>  4 IN          1                    10.6 \n#>  5 MI          0                    13.0 \n#>  6 MI          1                    11.3 \n#>  7 OH          0                    13.8 \n#>  8 OH          1                    11.8 \n#>  9 WI          0                     8.70\n#> 10 WI          1                     8.82"}]
